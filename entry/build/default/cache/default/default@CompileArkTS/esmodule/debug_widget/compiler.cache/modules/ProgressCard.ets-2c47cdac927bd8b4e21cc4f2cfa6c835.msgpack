‘r@ü™assertions§code¥customTransformCache¨dependencies¢id§meta±moduleSideEffects¨originalCode±originalSourcemap´resolvedIdsÆsourcemapChainµsyntheticNamedExportsµtransformDependenciesÆtransformFiles®cacheAst‘rAê⁄"§"use strict";
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License,Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let progressStorage = new LocalStorage();
class ProgressCard extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        this.__numerator = this.createLocalStorageProp('numerator', 0, "numerator");
        this.__denominator = this.createLocalStorageProp('denominator', 0, "denominator");
        this.__percent = this.createLocalStorageProp('percent', '0', "percent");
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.ACTION_TYPE = 'router';
        this.ABILITY_NAME = 'EntryAbility';
        this.FULL_WIDTH_PERCENT = '100%';
        this.FULL_HEIGHT_PERCENT = '100%';
        this.PROGRESS_LAYOUT_HEIGHT = '80%';
        this.RESULTS_LAYOUT_HEIGHT = '20%';
        this.PERCENTAGE = '%';
        this.SLASHES = '/';
        this.PROGRESS_TOTAL = 100;
        this.TEXT_SLIGHTLY_BOLD = 500;
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params) {
        if (params.ACTION_TYPE !== undefined) {
            this.ACTION_TYPE = params.ACTION_TYPE;
        }
        if (params.ABILITY_NAME !== undefined) {
            this.ABILITY_NAME = params.ABILITY_NAME;
        }
        if (params.FULL_WIDTH_PERCENT !== undefined) {
            this.FULL_WIDTH_PERCENT = params.FULL_WIDTH_PERCENT;
        }
        if (params.FULL_HEIGHT_PERCENT !== undefined) {
            this.FULL_HEIGHT_PERCENT = params.FULL_HEIGHT_PERCENT;
        }
        if (params.PROGRESS_LAYOUT_HEIGHT !== undefined) {
            this.PROGRESS_LAYOUT_HEIGHT = params.PROGRESS_LAYOUT_HEIGHT;
        }
        if (params.RESULTS_LAYOUT_HEIGHT !== undefined) {
            this.RESULTS_LAYOUT_HEIGHT = params.RESULTS_LAYOUT_HEIGHT;
        }
        if (params.PERCENTAGE !== undefined) {
            this.PERCENTAGE = params.PERCENTAGE;
        }
        if (params.SLASHES !== undefined) {
            this.SLASHES = params.SLASHES;
        }
        if (params.PROGRESS_TOTAL !== undefined) {
            this.PROGRESS_TOTAL = params.PROGRESS_TOTAL;
        }
        if (params.TEXT_SLIGHTLY_BOLD !== undefined) {
            this.TEXT_SLIGHTLY_BOLD = params.TEXT_SLIGHTLY_BOLD;
        }
    }
    updateStateVars(params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__numerator.purgeDependencyOnElmtId(rmElmtId);
        this.__denominator.purgeDependencyOnElmtId(rmElmtId);
        this.__percent.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__numerator.aboutToBeDeleted();
        this.__denominator.aboutToBeDeleted();
        this.__percent.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    get numerator() {
        return this.__numerator.get();
    }
    set numerator(newValue) {
        this.__numerator.set(newValue);
    }
    get denominator() {
        return this.__denominator.get();
    }
    set denominator(newValue) {
        this.__denominator.set(newValue);
    }
    get percent() {
        return this.__percent.get();
    }
    set percent(newValue) {
        this.__percent.set(newValue);
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.backgroundColor({ "id": 16777292, "type": 10001, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Column.width(this.FULL_WIDTH_PERCENT);
            Column.height(this.FULL_HEIGHT_PERCENT);
            Column.onClick(() => {
                postCardAction(this, {
                    'action': this.ACTION_TYPE,
                    'abilityName': this.ABILITY_NAME
                });
            });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Stack.create();
            Stack.height(this.PROGRESS_LAYOUT_HEIGHT);
        }, Stack);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Progress.create({ value: 0, total: this.PROGRESS_TOTAL, type: ProgressType.Ring });
            Progress.value(Number.parseInt(this.percent));
            Progress.width({ "id": 16777351, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Progress.height({ "id": 16777351, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Progress.backgroundColor({ "id": 16777291, "type": 10001, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Progress.style({ strokeWidth: { "id": 16777352, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" } });
        }, Progress);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.justifyContent(FlexAlign.Center);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.percent);
            Text.fontSize({ "id": 16777350, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.fontColor(Color.Black);
            Text.fontWeight(FontWeight.Normal);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.PERCENTAGE);
            Text.fontSize({ "id": 16777349, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.fontColor(Color.Black);
            Text.fontWeight(this.TEXT_SLIGHTLY_BOLD);
            Text.margin({ top: { "id": 16777348, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" } });
        }, Text);
        Text.pop();
        Row.pop();
        Stack.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.height(this.RESULTS_LAYOUT_HEIGHT);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.numerator.toString());
            Text.fontColor({ "id": 16777288, "type": 10001, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.fontSize({ "id": 16777347, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.lineHeight({ "id": 16777346, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.fontWeight(FontWeight.Normal);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.SLASHES + this.denominator);
            Text.fontColor({ "id": 16777279, "type": 10001, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.fontSize({ "id": 16777344, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.lineHeight({ "id": 16777343, "type": 10002, params: [], "bundleName": "com.example.healthy_life", "moduleName": "entry" });
            Text.fontWeight(FontWeight.Normal);
        }, Text);
        Text.pop();
        Row.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName() {
        return "ProgressCard";
    }
}
ViewStackProcessor.StartGetAccessRecordingFor(ViewStackProcessor.AllocateNewElmetIdForNextComponent());
loadEtsCard(new ProgressCard(undefined, {}, progressStorage), "com.example.healthy_life/entry/ets/progress/pages/ProgressCard");
ViewStackProcessor.StopGetAccessRecording();
//# sourceMappingURL=ProgressCard.js.map¬êŸVC:\Users\Fanful\IdeaProjects\Health\entry\src\main\ets\progress\pages\ProgressCard.ets‘rBö™moduleName±isLocalDependencyØisNodeEntryFileßpkgPath±belongProjectPathßpkgName™pkgVersion±dependencyPkgInfo∞belongModulePath¨shouldEmitJs•entry√¬Ÿ)C:\Users\Fanful\IdeaProjects\Health\entryŸ#C:\Users\Fanful\IdeaProjects\Health•entry•1.0.0‘  Ÿ)C:\Users\Fanful\IdeaProjects\Health\entry√√⁄Ö/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License,Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let progressStorage = new LocalStorage();

@Entry(progressStorage)
@Component
struct ProgressCard {
  @LocalStorageProp('numerator') numerator: number = 0;
  @LocalStorageProp('denominator') denominator: number = 0;
  @LocalStorageProp('percent') percent: string = '0';
  /*
   * The action type.
   */
  readonly ACTION_TYPE: string = 'router';
  /*
   * The ability name.
   */
  readonly ABILITY_NAME: string = 'EntryAbility';
  /*
   * The with percentage setting.
   */
  readonly FULL_WIDTH_PERCENT: string = '100%';
  /*
   * The height percentage setting.
   */
  readonly FULL_HEIGHT_PERCENT: string = '100%';
  /*
   * The progress layout height percentage setting.
   */
  readonly PROGRESS_LAYOUT_HEIGHT: string = '80%';
  /*
   * The finish results layout percentage setting.
   */
  readonly RESULTS_LAYOUT_HEIGHT: string = '20%';
  /*
   * The percent sign.
   */
  readonly PERCENTAGE: string = '%';
  /*
   * The slashes splicing.
   */
  readonly SLASHES: string = '/';
  /**
   * The progress total to 100.
   */
  readonly PROGRESS_TOTAL: number = 100;
  /**
   * The text slightly bold.
   */
  readonly TEXT_SLIGHTLY_BOLD: number = 500;

  build() {
    Column() {
      Stack() {
        Progress({ value: 0, total: this.PROGRESS_TOTAL, type: ProgressType.Ring })
          .value(Number.parseInt(this.percent))
          .width($r('app.float.progress_component_size'))
          .height($r('app.float.progress_component_size'))
          .backgroundColor($r('app.color.progress_background_color'))
          .style({ strokeWidth: $r('app.float.progress_stroke_width') })
        Row() {
          Text(this.percent)
            .fontSize($r('app.float.percent_text_size'))
            .fontColor(Color.Black)
            .fontWeight(FontWeight.Normal)
          Text(this.PERCENTAGE)
            .fontSize($r('app.float.percent_sign_size'))
            .fontColor(Color.Black)
            .fontWeight(this.TEXT_SLIGHTLY_BOLD)
            .margin({ top: $r('app.float.percent_sign_margin') })
        }
        .justifyContent(FlexAlign.Center)
      }
      .height(this.PROGRESS_LAYOUT_HEIGHT)

      Row() {
        Text(this.numerator.toString())
          .fontColor($r('app.color.numerator_text_color'))
          .fontSize($r('app.float.numerator_text_size'))
          .lineHeight($r('app.float.numerator_line_height'))
          .fontWeight(FontWeight.Normal)
        Text(this.SLASHES + this.denominator)
          .fontColor($r('app.color.denominator_text_color'))
          .fontSize($r('app.float.denominator_text_size'))
          .lineHeight($r('app.float.denominator_line_height'))
          .fontWeight(FontWeight.Normal)
      }
      .height(this.RESULTS_LAYOUT_HEIGHT)
    }
    .backgroundColor($r("app.color.progress_column_color"))
    .width(this.FULL_WIDTH_PERCENT)
    .height(this.FULL_HEIGHT_PERCENT)
    .onClick(() => {
      postCardAction(this, {
        'action': this.ACTION_TYPE,
        'abilityName': this.ABILITY_NAME
      });
    })
  }
}¿Aì‘rCñßversion§file™sourceRootßsources•names®mappingsØProgressCard.js†ë∞ProgressCard.etsê‹ ∑êêêêëî    êêêêêêêêêêêêëî òî   î î î î î& &î( (î) )íî î ëî  êñî î7 îÃB îÃD 5îÃE 6îÃT 7ñî î9 îÃF !îÃH 9îÃI :îÃZ ;ñî î5 î> îÃ@ 1îÃC 4îÃP 5êêêíî !î# )íî "î* 0íî" "(î( ".íî# &)î) &/íî& *,î+ *1íî% .+î* .0íî 2 î 2#íî 6î 6 íî :$î! :'íî" >(î% >+êêëî )êêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêíî !î *êêíî !î *êêíî #î .êêíî #î .êêíî î &êêíî î &êêëî Ã@êíî ÃAî ÃA
îî ÃAî ÃA
î Ãfî" Ãfòî ÃAî ÃA
î Ãgî Ãg
î Ãgî Ãgî Ãgî0 Ãg"òî ÃAî ÃA
î Ãhî Ãhî Ãhî Ãhî Ãhî2 Ãh$óî ÃAî ÃA
î Ãiî Ãiî Ãiî Ãiî  Ãiïî Ãjî Ãjî Ãjî# Ãjî% Ãjñî Ãkî Ãkî Ãkî" Ãkî# Ãkî. Ãk"ñî Ãlî! Ãlî# Ãlî' Ãlî( Ãlî4 Ãl(ìî Ãmî Ãmî Ãm	íî Ãnî Ãnêêíî ÃBî ÃBòî ÃBî ÃBî ÃVî ÃVî ÃVî ÃVî ÃVî4 ÃV)êê‹ î ÃCî ÃCî ÃCî ÃCî# ÃCî% ÃCî& ÃCî( ÃCî- ÃC"î/ ÃC$î3 ÃC(î4 ÃC)îÃB ÃC7îÃD ÃC9îÃH ÃC=îÃJ ÃC?îÃV ÃCÃKîÃW ÃCÃLîÃ[ ÃCÃPîÃ] ÃCÃRùî ÃCî ÃCî ÃDî ÃDî ÃDî! ÃDî" ÃDî* ÃD î+ ÃD!î/ ÃD%î0 ÃD&î7 ÃD-î8 ÃD.îî ÃCî ÃCî ÃEî ÃEîî ÃCî ÃCî ÃFî ÃFîî ÃCî ÃCî ÃGî$ ÃGôî ÃCî ÃCî ÃHî ÃHî ÃHî ÃHî( ÃHîÃò ÃHÃEîÃö ÃHÃGêêíî ÃIî ÃIòî ÃIî ÃIî ÃT	î ÃTî ÃTî( ÃT!î) ÃT"î/ ÃT(êêñî ÃJ
î ÃJî ÃJî ÃJî ÃJî$ ÃJîî ÃJ
î ÃJî ÃKî ÃKòî ÃJ
î ÃJî ÃLî ÃLî ÃLî  ÃLî! ÃLî& ÃL"òî ÃJ
î ÃJî ÃMî ÃMî ÃMî& ÃM"î' ÃM#î- ÃM)êíî ÃJ
î ÃJêñî ÃN
î ÃNî ÃNî ÃNî ÃNî' ÃNîî ÃN
î ÃNî ÃOî ÃOòî ÃN
î ÃNî ÃPî ÃPî ÃPî  ÃPî! ÃPî& ÃP"òî ÃN
î ÃNî ÃQî ÃQî ÃQî  ÃQî! ÃQî3 ÃQ/ôî ÃN
î ÃNî ÃRî ÃRî ÃRî ÃRî ÃRîÃç ÃR>îÃè ÃRÃ@êíî ÃN
î ÃNíî ÃIî ÃIíî ÃBî ÃBêíî ÃXî ÃX	òî ÃXî ÃX	î Ãdî Ãdî Ãdî Ãdî Ãdî1 Ãd(êêôî ÃYî ÃYî ÃYî ÃYî ÃYî& ÃYî' ÃYî/ ÃY$î1 ÃY&îî ÃYî ÃYî ÃZî ÃZîî ÃYî ÃYî Ã[î Ã[îî ÃYî ÃYî Ã\î Ã\òî ÃYî ÃYî Ã]î Ã]î Ã]î& Ã] î' Ã]!î- Ã]'êíî ÃYî ÃYêöî Ã^î Ã^î Ã^î Ã^î Ã^î$ Ã^î' Ã^î+ Ã^ î, Ã^!î7 Ã^,îî Ã^î Ã^î Ã_î Ã_îî Ã^î Ã^î Ã`î Ã`îî Ã^î Ã^î Ãaî Ãaòî Ã^î Ã^î Ãbî Ãbî Ãbî& Ãb î' Ãb!î- Ãb'êíî Ã^î Ã^íî ÃXî ÃX	íî ÃAî ÃA
ëî Ãoêêêêêêêêíî, î; ‘rDñßversion§fileßsourcesÆsourcesContent•names®mappings¿ë¿ë¿ê‹ πëî    ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî  	 ëî  
 ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî    ëî  ! ëî  " ëî  # ëî  $ ëî  % ëî  & ëî  ' ëî  ( ëî  ) ëî  * ëî  + ëî  , ëî  - ëî  . ëî  / ëî  0 ëî  1 ëî  2 ëî  3 ëî  4 ëî  5 ëî  6 ëî  7 ëî  8 ëî  9 ëî  : ëî  ; ëî  < ëî  = ëî  > ëî  ? ëî  Ã@ ëî  ÃA ëî  ÃB ëî  ÃC ëî  ÃD ëî  ÃE ëî  ÃF ëî  ÃG ëî  ÃH ëî  ÃI ëî  ÃJ ëî  ÃK ëî  ÃL ëî  ÃM ëî  ÃN ëî  ÃO ëî  ÃP ëî  ÃQ ëî  ÃR ëî  ÃS ëî  ÃT ëî  ÃU ëî  ÃV ëî  ÃW ëî  ÃX ëî  ÃY ëî  ÃZ ëî  Ã[ ëî  Ã\ ëî  Ã] ëî  Ã^ ëî  Ã_ ëî  Ã` ëî  Ãa ëî  Ãb ëî  Ãc ëî  Ãd ëî  Ãe ëî  Ãf ëî  Ãg ëî  Ãh ëî  Ãi ëî  Ãj ëî  Ãk ëî  Ãl ëî  Ãm ëî  Ãn ëî  Ão ëî  Ãp ëî  Ãq ëî  Ãr ëî  Ãs ëî  Ãt ëî  Ãu ëî  Ãv ëî  Ãw ëî  Ãx ëî  Ãy ëî  Ãz ëî  Ã{ ëî  Ã| ëî  Ã} ëî  Ã~ ëî  Ã ëî  ÃÄ ëî  ÃÅ ëî  ÃÇ ëî  ÃÉ ëî  ÃÑ ëî  ÃÖ ëî  ÃÜ ëî  Ãá ëî  Ãà ëî  Ãâ ëî  Ãä ëî  Ãã ëî  Ãå ëî  Ãç ëî  Ãé ëî  Ãè ëî  Ãê ëî  Ãë ëî  Ãí ëî  Ãì ëî  Ãî ëî  Ãï ëî  Ãñ ëî  Ãó ëî  Ãò ëî  Ãô ëî  Ãö ëî  Ãõ ëî  Ãú ëî  Ãù ëî  Ãû ëî  Ãü ëî  Ã† ëî  Ã° ëî  Ã¢ ëî  Ã£ ëî  Ã§ ëî  Ã• ëî  Ã¶ ëî  Ãß ëî  Ã® ëî  Ã© ëî  Ã™ ëî  Ã´ ëî  Ã¨ ëî  Ã≠ ëî  ÃÆ ëî  ÃØ ëî  Ã∞ ëî  Ã± ëî  Ã≤ ëî  Ã≥ ëî  Ã¥ ëî  Ãµ ëî  Ã∂ ëî  Ã∑ ëî  Ã∏ ‘rEíßmissing¶plugin√¶genAbc¬ê‘  ‘rFî≤dynamicImportCacheπexportAllDeclarationCacheªexportNamedDeclarationCache´importCacheêêêê