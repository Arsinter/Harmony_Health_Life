‘r@ü™assertions§code¥customTransformCache¨dependencies¢id§meta±moduleSideEffects¨originalCode±originalSourcemap´resolvedIdsÆsourcemapChainµsyntheticNamedExportsµtransformDependenciesÆtransformFiles®cacheAst‘rAê⁄HŒvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License,Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonConstants as Const } from '../common/constants/CommonConstants';
import { isReachNewAchievement, ACHIEVEMENT_LEVEL_KEY } from '../model/AchieveModel';
import { TaskMapById, ACHIEVEMENT_LEVEL_LIST } from '../model/TaskInitList';
import TaskInfo from './TaskInfo';
import DayInfo from './DayInfo';
import { dateToStr, weekDateFormat } from '../common/utils/Utils';
import { WeekDateModel, initializeOnStartUp, getPreviousWeek, WEEK_DAY_NUM } from '../model/WeekCalendarModel';
import DatabaseApi from '../model/DatabaseModel';
import TaskInfoTableApi from '../common/database/tables/TaskInfoApi';
import DayInfoApi from '../common/database/tables/DayInfoApi';
import GlobalInfoApi from '../common/database/tables/GlobalInfoApi';
import Logger from '../common/utils/Logger';
import HashMap from '@ohos.util.HashMap'; // ÂØºÂÖ•HashMapÊ®°Âùó
let HomeStore = class HomeStore {
    constructor(currentDate) {
        this.dateArr = []; // data source list
        this.selectedDayInfo = new WeekDateModel('', '', new Date()); // task info on selected day
        this.dayInfoMap = new HashMap();
        this.currentDate = currentDate;
        this.showDate = currentDate.getTime();
        this.dateTitle = weekDateFormat(currentDate.getTime());
        this.selectedDay = (new Date().getDay() + WEEK_DAY_NUM - 1) % WEEK_DAY_NUM;
    }
    // public initData() {
    //   let weekCalendarInfo: WeekCalendarInfo = initializeOnStartUp(this.currentDate);
    //   this.dateArr = weekCalendarInfo.arr;
    //   Logger.info('this.currentDate', this.currentDate.toDateString());
    //   Logger.info('initWeekData dateArr', JSON.stringify(weekCalendarInfo.strArr))
    //   // get data form db
    //   DatabaseApi.query(dateToStr(new Date()), (taskList: TaskInfo[], dayInfo: DayInfo) => {
    //     Logger.info('Current Day Task Info: ', JSON.stringify(taskList));
    //     DayInfoApi.queryList(weekCalendarInfo.strArr, (res: DayInfo[]) => {
    //       let tempList = res.concat(dayInfo);
    //       Logger.info('initDayInfoList: ', JSON.stringify(res));
    //       for (let i = 0; i < this.dateArr.length; i++) {
    //         let tempDayInfo = tempList.find((item: DayInfo) => item.date === this.dateArr[i].dateStr) || new DayInfo(this.dateArr[i].dateStr, 0, 0);
    //         weekCalendarInfo.arr[i].dayInfo = tempDayInfo;
    //         if (this.dateArr[i].dateStr === dateToStr(new Date(this.showDate))) {
    //           // get tasks of showDate
    //           weekCalendarInfo.arr[i].taskList = taskList;
    //         }
    //       }
    //       this.dateArr = weekCalendarInfo.arr;
    //       setTimeout(() => {
    //         this.setSelectedShowDate(this.showDate);
    //       }, 0)
    //     })
    //   })
    // }
    initData() {
        let weekCalendarInfo = initializeOnStartUp(this.currentDate);
        this.dateArr = weekCalendarInfo.arr;
        Logger.info('this.currentDate', this.currentDate.toDateString());
        Logger.info('initWeekData dateArr', JSON.stringify(weekCalendarInfo.strArr));
        // get data form db
        DatabaseApi.query(dateToStr(new Date()), (taskList, dayInfo) => {
            Logger.info('Current Day Task Info: ', JSON.stringify(taskList));
            DayInfoApi.queryList(weekCalendarInfo.strArr, (res) => {
                let tempList = res.concat(dayInfo);
                Logger.info('initDayInfoList: ', JSON.stringify(res));
                for (let i = 0; i < this.dateArr.length; i++) {
                    let tempDayInfo = tempList.find((item) => item.date === this.dateArr[i].dateStr) || new DayInfo(this.dateArr[i].dateStr, 0, 0);
                    weekCalendarInfo.arr[i].dayInfo = tempDayInfo;
                    if (this.dateArr[i].dateStr === dateToStr(new Date(this.showDate))) {
                        // get tasks of showDate
                        weekCalendarInfo.arr[i].taskList = taskList;
                    }
                }
                // for (let i = 0; i < 30; i++) {
                //   let tempDayInfo = tempList.find((item: DayInfo) => item.date === this.dateArr[i].dateStr) || new DayInfo(this.dateArr[i].dateStr, 0, 0);
                //   weekCalendarInfo.arr[i].dayInfo = tempDayInfo;
                //   if (this.dateArr[i].dateStr === dateToStr(new Date(this.showDate))) {
                //     // get tasks of showDate
                //     weekCalendarInfo.arr[i].taskList = taskList;
                //   }
                // }
                this.dateArr = weekCalendarInfo.arr;
                for (let item of this.dateArr) {
                    // this.dayInfoMap[Number(item.date)] = item.dayInfo;
                    this.dayInfoMap.set(Number(item.date), item.dayInfo);
                }
                setTimeout(() => {
                    this.setSelectedShowDate(this.showDate);
                }, 0);
            });
        });
    }
    getPreWeekData(date, callback) {
        let weekCalendarInfo = getPreviousWeek(date);
        // get data form db
        DayInfoApi.queryList(weekCalendarInfo.strArr, (res) => {
            Logger.info('getPreWeekData->DayInfoList: ', JSON.stringify(res));
            if (res.length > 0) {
                for (let i = 0; i < weekCalendarInfo.arr.length; i++) {
                    let dayInfo = res.find((item) => item.date === weekCalendarInfo.arr[i].dateStr);
                    if (dayInfo) {
                        weekCalendarInfo.arr[i].dayInfo = dayInfo;
                    }
                }
            }
            this.dateArr = weekCalendarInfo.arr.concat(...this.dateArr);
            callback();
        });
    }
    // check is current day
    checkCurrentDay() {
        return dateToStr(new Date()) === this.selectedDayInfo?.dateStr;
    }
    updateSelectedDayInfo(selectedDayInfo) {
        Logger.debug('updateSelectedDayInfo', JSON.stringify(selectedDayInfo));
        if (selectedDayInfo.taskList?.length === 0) {
            // get data form db
            TaskInfoTableApi.query(selectedDayInfo.dateStr, true, (res) => {
                Logger.info('Selected TaskInfoList: ', JSON.stringify(res));
                selectedDayInfo.taskList = res;
                this.dateArr = this.dateArr.map((item) => {
                    if (item.dateStr === selectedDayInfo.dateStr) {
                        let taskListStr = JSON.stringify(res);
                        item.taskList = JSON.parse(taskListStr);
                        return item;
                    }
                    else {
                        return item;
                    }
                });
                this.selectedDayInfo = selectedDayInfo;
            });
        }
        else {
            this.selectedDayInfo = selectedDayInfo;
        }
        Logger.info("selectedDayTaskInfo: ", JSON.stringify(selectedDayInfo.taskList));
    }
    updateTaskInfoList(editedTaskInfo) {
        if (editedTaskInfo?.taskID) {
            // edited task
            let taskID = editedTaskInfo.taskID;
            let targetValue = editedTaskInfo.targetValue;
            let isAlarm = editedTaskInfo.isAlarm;
            let frequency = editedTaskInfo.frequency;
            let startTime = editedTaskInfo.startTime;
            let endTime = editedTaskInfo.endTime;
            let isOpen = editedTaskInfo.isOpen;
            //ËøôÈáåÂÄíÊï∞Á¨¨‰∏â‰∏™ÂèÇÊï∞Â∫îËØ•false Âõ†‰∏∫ËøôÊòØÈ¶ñÊ¨°Ê∑ªÂä†‰∏Ä‰∏™‰ªªÂä°ÂêéÁöÑ‰∏ªÈ°µÊõ¥Êñ∞ÔºåÂ∫îËØ•ÊòØÊ≤°ÊúâÂÆåÊàê ÁÑ∂ÂêéÂÄíÊï∞Á¨¨‰∫å‰∏™ÂèÇÊï∞ÊòØfinValueÂàùÂßãÂ∫î‰∏∫""
            /*let task = new TaskInfo(0, dateToStr(new Date()), taskID, targetValue, isAlarm,
              startTime, endTime, frequency, true, targetValue, isOpen);*/
            let task = new TaskInfo(0, dateToStr(new Date()), taskID, targetValue, isAlarm, startTime, endTime, frequency, false, "", isOpen);
            this.dateArr = this.dateArr.map((item) => {
                if (task.date === item.dateStr) {
                    Logger.info('item', JSON.stringify(item));
                    let taskList = item.taskList;
                    const dayInfo = item.dayInfo;
                    if (editedTaskInfo.isOpen) {
                        // add task
                        taskList = taskList.filter((taskItem) => taskItem.taskID != taskID)
                            .concat(task)
                            .sort((a, b) => a.taskID - b.taskID);
                        let count = 0;
                        taskList.forEach((taskItem) => {
                            if (taskItem.isDone) {
                                count++;
                            }
                        });
                        if (count > dayInfo.finTaskNum) {
                            dayInfo.finTaskNum = count;
                        }
                    }
                    else {
                        // delete task
                        let taskIndex = taskList.findIndex((taskItem) => taskItem.taskID === taskID);
                        Logger.info('taskList[taskIndex]', JSON.stringify(taskList[taskIndex]));
                        if (taskList[taskIndex]?.isDone) {
                            dayInfo.finTaskNum -= 1;
                        }
                        taskList = taskList.filter((taskItem) => taskItem.taskID != taskID);
                    }
                    dayInfo.targetTaskNum = taskList.length;
                    if (dayInfo.finTaskNum > dayInfo.targetTaskNum) {
                        dayInfo.finTaskNum = dayInfo.targetTaskNum;
                    }
                    DayInfoApi.updateData(dayInfo, () => {
                    });
                    Logger.debug("tempDayInfo", JSON.stringify(dayInfo));
                    let weekDateModelStr = JSON.stringify(item);
                    let currentDayInfo = JSON.parse(weekDateModelStr);
                    currentDayInfo.date = item.date;
                    currentDayInfo.taskList = taskList;
                    currentDayInfo.dayInfo = dayInfo;
                    if (this.checkCurrentDay()) {
                        this.selectedDayInfo = currentDayInfo;
                    }
                    return currentDayInfo;
                }
                return item;
            }).slice(0);
        }
    }
    setSelectedShowDate(showDateTime) {
        if (showDateTime > new Date().getTime()) {
            return;
        }
        this.showDate = showDateTime;
        this.dateTitle = weekDateFormat(this.showDate);
        let selectedInfo = this.dateArr.find((item) => item.dateStr === dateToStr(new Date(showDateTime)));
        if (selectedInfo) {
            this.updateSelectedDayInfo(selectedInfo);
        }
        Logger.info('dateTitle', this.dateTitle);
    }
    getDonePercent() {
        let dayInfo = this.selectedDayInfo?.dayInfo;
        Logger.debug("dayInfo", JSON.stringify(dayInfo));
        if (dayInfo && (dayInfo?.finTaskNum || 0) > 0) {
            if (dayInfo.finTaskNum > dayInfo.targetTaskNum) {
                return `${Const.DEFAULT_100}`;
            }
            return `${Math.ceil(dayInfo.finTaskNum / dayInfo.targetTaskNum * Const.DEFAULT_100)}`;
        }
        return '0';
    }
    getTaskListOfDay() {
        Logger.info('getTaskListOfDay', JSON.stringify(this.selectedDayInfo));
        if (this.selectedDayInfo && this.selectedDayInfo.taskList.length > 0) {
            return this.selectedDayInfo.taskList;
        }
        return [];
    }
    async taskClock(taskInfo) {
        let taskItem = await this.updateTask(taskInfo);
        let dateStr = this.selectedDayInfo?.dateStr;
        if (!taskItem) {
            return {
                achievementLevel: 0,
                showAchievement: false
            };
        }
        this.selectedDayInfo.taskList = this.selectedDayInfo.taskList.map((item) => {
            return item.taskID === taskItem?.taskID ? taskItem : item;
        });
        let achievementLevel = 0;
        if (taskItem.isDone) {
            let dayInfo = await this.updateDayInfo();
            if (dayInfo && dayInfo?.finTaskNum === dayInfo?.targetTaskNum) {
                achievementLevel = await this.updateAchievement(this.selectedDayInfo.dayInfo);
            }
        }
        this.dateArr = this.dateArr.map((item) => dateStr === item.dateStr ? this.selectedDayInfo : item);
        return {
            achievementLevel: achievementLevel,
            showAchievement: ACHIEVEMENT_LEVEL_LIST.includes(achievementLevel)
        };
    }
    // ÂØπ‰ªªÂä°Áä∂ÊÄÅËøõË°åÊõ¥Êñ∞
    // Êñ∞Â¢ûÂ≠óÊÆµ isTargetReached Áî®‰∫éÈÅøÂÖç finValue Ë¢´ targetValue Ë¶ÜÁõñ
    updateTask(task) {
        return new Promise((resolve, reject) => {
            let taskID = task.taskID;
            let targetValue = task.targetValue;
            let finValue = task.finValue;
            let updateTask = new TaskInfo(task.id, task.date, taskID, targetValue, task.isAlarm, task.startTime, task.endTime, task.frequency, task.isDone, task.finValue, task.isOpen, task.isTargetReached);
            let step = TaskMapById[taskID - 1].step;
            let hasExceed = updateTask.isDone;
            if (step === 0) {
                updateTask.isDone = true;
                updateTask.finValue = targetValue;
                updateTask.isTargetReached = true;
            }
            else {
                let value = Number(finValue) + step;
                // Ê≠§Â§ÑÂà§Êñ≠ ‰ªªÂä°ÊòØÂê¶ÂÆåÊàê
                // updateTask.isDone = updateTask.isDone || value >= Number(targetValue);
                // updateTask.finValue = updateTask.isDone ? targetValue : `${value}`;
                Logger.info("ready to find outside", finValue);
                if (value >= Number(targetValue)) {
                    updateTask.isDone = true;
                    updateTask.isTargetReached = true;
                    updateTask.finValue = `${value}`;
                    Logger.info("ready to find inside", finValue);
                }
                else {
                    updateTask.finValue = `${value}`;
                }
                task.finValue = updateTask.finValue;
            }
            TaskInfoTableApi.updateDataByDate(updateTask, (res) => {
                if (!res || hasExceed) {
                    Logger.error('taskClock-updateTask', JSON.stringify(res));
                    reject(res);
                }
                resolve(updateTask);
            });
        });
    }
    updateDayInfo() {
        let dayInfo = this.selectedDayInfo.dayInfo;
        dayInfo.finTaskNum += 1;
        dayInfo.targetTaskNum = this.selectedDayInfo.taskList.length;
        return new Promise((resolve, reject) => {
            DayInfoApi.updateData(dayInfo, (res) => {
                if (!res) {
                    Logger.error('taskClock-updateDayInfo', JSON.stringify(res));
                    reject(res);
                }
                Logger.info('taskClock-updateDayInfo', JSON.stringify(dayInfo));
                // ÂêåÊ≠•ÁïåÈù¢Êï∞ÊçÆ
                let dayInfoStr = JSON.stringify(dayInfo);
                this.selectedDayInfo.dayInfo = JSON.parse(dayInfoStr);
                resolve(dayInfo);
            });
        });
    }
    updateAchievement(dayInfo) {
        Logger.debug('taskClock-updateAchievement', JSON.stringify(dayInfo));
        return new Promise((resolve, reject) => {
            let preDay = new Date();
            preDay.setDate(preDay.getDate() - 1);
            preDay = new Date(preDay);
            let preDayStr = dateToStr(preDay);
            Logger.info('taskClock-updateAchievement-1', `${preDayStr}`);
            DayInfoApi.query(preDayStr, (res) => {
                Logger.info('taskClock-updateAchievement-2', JSON.stringify(res));
                let isReset = res?.date === '' || res?.targetTaskNum > res?.finTaskNum;
                GlobalInfoApi.query((res) => {
                    Logger.info('taskClock-globalInfoApi', JSON.stringify(res));
                    let achievementInfo = res;
                    isReset ? (achievementInfo.checkInDays = 1) : (achievementInfo.checkInDays += 1);
                    let isNewAchieve = isReachNewAchievement(achievementInfo);
                    if (isNewAchieve) {
                        AppStorage.setOrCreate(ACHIEVEMENT_LEVEL_KEY, achievementInfo.checkInDays);
                        achievementInfo.achievements = achievementInfo.achievements + ',' + achievementInfo.checkInDays;
                    }
                    GlobalInfoApi.updateData(achievementInfo, (res) => {
                        if (!res) {
                            Logger.error('taskClock-updateAchievement', JSON.stringify(res));
                            reject(res);
                        }
                        Logger.debug('taskClock-updateAchievement', JSON.stringify(achievementInfo));
                        isNewAchieve ? resolve(achievementInfo.checkInDays) : resolve(0);
                    });
                });
            });
        });
    }
};
HomeStore = __decorate([
    Observed
], HomeStore);
export { HomeStore };
//# sourceMappingURL=HomeViewModel.js.map¬ùŸjC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\constants\CommonConstants.etsŸ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\AchieveModel.etsŸ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\TaskInitList.etsŸ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\viewmodel\TaskInfo.etsŸ[C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\viewmodel\DayInfo.etsŸ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\utils\Utils.etsŸaC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\WeekCalendarModel.etsŸ]C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\DatabaseModel.etsŸlC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\database\tables\TaskInfoApi.etsŸkC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\database\tables\DayInfoApi.etsŸnC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\database\tables\GlobalInfoApi.etsŸ]C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\utils\Logger.etsŸl hvigor_ignore_C:_Program Files_Huawei_DevEco Studio_sdk_default_openharmony_ets_api_@ohos.util.HashMap.d.tsŸaC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\viewmodel\HomeViewModel.ets‘rBõ™moduleName±isLocalDependencyØisNodeEntryFileßpkgPath±belongProjectPathßpkgName™pkgVersion±dependencyPkgInfo∞belongModulePathØhostModulesInfo¨shouldEmitJs•entry√¬Ÿ8C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entryŸ2C:\Users\Fanful\IdeaProjects\healthLab\Health_Life•entry•1.0.0‘  Ÿ8C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entryë‘rCí≤hostDependencyNameÆhostModuleName∫../viewmodel/HomeViewModel•entry√√⁄A/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License,Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { CommonConstants as Const } from '../common/constants/CommonConstants';
import { isReachNewAchievement, ACHIEVEMENT_LEVEL_KEY } from '../model/AchieveModel';
import { TaskMapById, ITaskItem, ACHIEVEMENT_LEVEL_LIST } from '../model/TaskInitList';
import TaskInfo from './TaskInfo';
import DayInfo from './DayInfo';
import { dateToStr, weekDateFormat } from '../common/utils/Utils';
import { WeekDateModel, initializeOnStartUp, getPreviousWeek, WEEK_DAY_NUM } from '../model/WeekCalendarModel';
import DatabaseApi from '../model/DatabaseModel';
import TaskInfoTableApi from '../common/database/tables/TaskInfoApi';
import DayInfoApi from '../common/database/tables/DayInfoApi';
import GlobalInfoApi from '../common/database/tables/GlobalInfoApi';
import Logger from '../common/utils/Logger';
import GlobalInfo from './GlobalInfo';
import WeekCalendarInfo from './WeekCalendarInfo';
import AchievementInfo from './AchievementInfo';

import HashMap from '@ohos.util.HashMap'; // ÂØºÂÖ•HashMapÊ®°Âùó

@Observed
export class HomeStore {
  public currentDate: Date;
  public dateArr: Array<WeekDateModel> = []; // data source list
  public selectedDay: number; // selected day of on week
  public showDate: number;
  public dateTitle: string;
  public selectedDayInfo: WeekDateModel = new WeekDateModel('', '', new Date()); // task info on selected day
  public dayInfoMap: HashMap<number, DayInfo> = new HashMap();

  constructor(currentDate: Date) {
    this.currentDate = currentDate;
    this.showDate = currentDate.getTime();
    this.dateTitle = weekDateFormat(currentDate.getTime());
    this.selectedDay = (new Date().getDay() + WEEK_DAY_NUM - 1) % WEEK_DAY_NUM;
  }

  // public initData() {
  //   let weekCalendarInfo: WeekCalendarInfo = initializeOnStartUp(this.currentDate);
  //   this.dateArr = weekCalendarInfo.arr;
  //   Logger.info('this.currentDate', this.currentDate.toDateString());
  //   Logger.info('initWeekData dateArr', JSON.stringify(weekCalendarInfo.strArr))
  //   // get data form db
  //   DatabaseApi.query(dateToStr(new Date()), (taskList: TaskInfo[], dayInfo: DayInfo) => {
  //     Logger.info('Current Day Task Info: ', JSON.stringify(taskList));
  //     DayInfoApi.queryList(weekCalendarInfo.strArr, (res: DayInfo[]) => {
  //       let tempList = res.concat(dayInfo);
  //       Logger.info('initDayInfoList: ', JSON.stringify(res));
  //       for (let i = 0; i < this.dateArr.length; i++) {
  //         let tempDayInfo = tempList.find((item: DayInfo) => item.date === this.dateArr[i].dateStr) || new DayInfo(this.dateArr[i].dateStr, 0, 0);
  //         weekCalendarInfo.arr[i].dayInfo = tempDayInfo;
  //         if (this.dateArr[i].dateStr === dateToStr(new Date(this.showDate))) {
  //           // get tasks of showDate
  //           weekCalendarInfo.arr[i].taskList = taskList;
  //         }
  //       }
  //       this.dateArr = weekCalendarInfo.arr;
  //       setTimeout(() => {
  //         this.setSelectedShowDate(this.showDate);
  //       }, 0)
  //     })
  //   })
  // }
  public initData() {
    let weekCalendarInfo: WeekCalendarInfo = initializeOnStartUp(this.currentDate);
    this.dateArr = weekCalendarInfo.arr;
    Logger.info('this.currentDate', this.currentDate.toDateString());
    Logger.info('initWeekData dateArr', JSON.stringify(weekCalendarInfo.strArr))
    // get data form db
    DatabaseApi.query(dateToStr(new Date()), (taskList: TaskInfo[], dayInfo: DayInfo) => {
      Logger.info('Current Day Task Info: ', JSON.stringify(taskList));
      DayInfoApi.queryList(weekCalendarInfo.strArr, (res: DayInfo[]) => {
        let tempList = res.concat(dayInfo);
        Logger.info('initDayInfoList: ', JSON.stringify(res));
        for (let i = 0; i < this.dateArr.length; i++) {
          let tempDayInfo = tempList.find((item: DayInfo) => item.date === this.dateArr[i].dateStr) || new DayInfo(this.dateArr[i].dateStr, 0, 0);
          weekCalendarInfo.arr[i].dayInfo = tempDayInfo;
          if (this.dateArr[i].dateStr === dateToStr(new Date(this.showDate))) {
            // get tasks of showDate
            weekCalendarInfo.arr[i].taskList = taskList;
          }
        }
        // for (let i = 0; i < 30; i++) {
        //   let tempDayInfo = tempList.find((item: DayInfo) => item.date === this.dateArr[i].dateStr) || new DayInfo(this.dateArr[i].dateStr, 0, 0);
        //   weekCalendarInfo.arr[i].dayInfo = tempDayInfo;
        //   if (this.dateArr[i].dateStr === dateToStr(new Date(this.showDate))) {
        //     // get tasks of showDate
        //     weekCalendarInfo.arr[i].taskList = taskList;
        //   }
        // }
        this.dateArr = weekCalendarInfo.arr;
        for (let item of this.dateArr) {
          // this.dayInfoMap[Number(item.date)] = item.dayInfo;
          this.dayInfoMap.set(Number(item.date), item.dayInfo);
        }
        setTimeout(() => {
          this.setSelectedShowDate(this.showDate);
        }, 0)
      })
    })
  }

  public getPreWeekData(date: Date, callback: Function) {
    let weekCalendarInfo: WeekCalendarInfo = getPreviousWeek(date);
    // get data form db
    DayInfoApi.queryList(weekCalendarInfo.strArr, (res: DayInfo[]) => {
      Logger.info('getPreWeekData->DayInfoList: ', JSON.stringify(res));
      if (res.length > 0) {
        for (let i = 0; i < weekCalendarInfo.arr.length; i++) {
          let dayInfo = res.find((item) => item.date === weekCalendarInfo.arr[i].dateStr);
          if (dayInfo) {
            weekCalendarInfo.arr[i].dayInfo = dayInfo;
          }
        }
      }
      this.dateArr = weekCalendarInfo.arr.concat(...this.dateArr);
      callback();
    })
  }

  // check is current day
  public checkCurrentDay(): boolean {
    return dateToStr(new Date()) === this.selectedDayInfo?.dateStr;
  }

  public updateSelectedDayInfo(selectedDayInfo: WeekDateModel) {
    Logger.debug('updateSelectedDayInfo', JSON.stringify(selectedDayInfo));
    if (selectedDayInfo.taskList?.length === 0) {
      // get data form db
      TaskInfoTableApi.query(selectedDayInfo.dateStr, true, (res: TaskInfo[]) => {
        Logger.info('Selected TaskInfoList: ', JSON.stringify(res));
        selectedDayInfo.taskList = res;
        this.dateArr = this.dateArr.map((item: WeekDateModel) => {
          if (item.dateStr === selectedDayInfo.dateStr) {
            let taskListStr = JSON.stringify(res);
            item.taskList = JSON.parse(taskListStr);
            return item;
          } else {
            return item;
          }
        })
        this.selectedDayInfo = selectedDayInfo;
      });
    } else {
      this.selectedDayInfo = selectedDayInfo;
    }
    Logger.info("selectedDayTaskInfo: ", JSON.stringify(selectedDayInfo.taskList));
  }

  public updateTaskInfoList(editedTaskInfo: ITaskItem) {
    if (editedTaskInfo?.taskID) {
      // edited task
      let taskID = editedTaskInfo.taskID;
      let targetValue = editedTaskInfo.targetValue;
      let isAlarm = editedTaskInfo.isAlarm;
      let frequency = editedTaskInfo.frequency;
      let startTime = editedTaskInfo.startTime;
      let endTime = editedTaskInfo.endTime;
      let isOpen = editedTaskInfo.isOpen;
      //ËøôÈáåÂÄíÊï∞Á¨¨‰∏â‰∏™ÂèÇÊï∞Â∫îËØ•false Âõ†‰∏∫ËøôÊòØÈ¶ñÊ¨°Ê∑ªÂä†‰∏Ä‰∏™‰ªªÂä°ÂêéÁöÑ‰∏ªÈ°µÊõ¥Êñ∞ÔºåÂ∫îËØ•ÊòØÊ≤°ÊúâÂÆåÊàê ÁÑ∂ÂêéÂÄíÊï∞Á¨¨‰∫å‰∏™ÂèÇÊï∞ÊòØfinValueÂàùÂßãÂ∫î‰∏∫""
      /*let task = new TaskInfo(0, dateToStr(new Date()), taskID, targetValue, isAlarm,
        startTime, endTime, frequency, true, targetValue, isOpen);*/
      let task = new TaskInfo(0, dateToStr(new Date()), taskID, targetValue, isAlarm,
        startTime, endTime, frequency, false, "", isOpen);
      this.dateArr = this.dateArr.map((item: WeekDateModel) => {
        if (task.date === item.dateStr) {
          Logger.info('item', JSON.stringify(item));
          let taskList: TaskInfo[] = item.taskList;
          const dayInfo: DayInfo = item.dayInfo;
          if (editedTaskInfo.isOpen) {
            // add task
            taskList = taskList.filter((taskItem) => taskItem.taskID != taskID)
              .concat(task)
              .sort((a, b) => a.taskID - b.taskID);
            let count: number = 0;
            taskList.forEach((taskItem: TaskInfo) => {
              if (taskItem.isDone) {
                count++;
              }
            });
            if (count > dayInfo.finTaskNum) {
              dayInfo.finTaskNum = count;
            }
          } else {
            // delete task
            let taskIndex = taskList.findIndex((taskItem) => taskItem.taskID === taskID);
            Logger.info('taskList[taskIndex]', JSON.stringify(taskList[taskIndex]));
            if (taskList[taskIndex]?.isDone) {
              dayInfo.finTaskNum -= 1;
            }
            taskList = taskList.filter((taskItem) => taskItem.taskID != taskID);
          }
          dayInfo.targetTaskNum = taskList.length;
          if (dayInfo.finTaskNum > dayInfo.targetTaskNum) {
            dayInfo.finTaskNum = dayInfo.targetTaskNum;
          }
          DayInfoApi.updateData(dayInfo, () => {
          });
          Logger.debug("tempDayInfo", JSON.stringify(dayInfo));
          let weekDateModelStr = JSON.stringify(item);
          let currentDayInfo: WeekDateModel = JSON.parse(weekDateModelStr);
          currentDayInfo.date = item.date;
          currentDayInfo.taskList = taskList;
          currentDayInfo.dayInfo = dayInfo;
          if (this.checkCurrentDay()) {
            this.selectedDayInfo = currentDayInfo;
          }
          return currentDayInfo;
        }
        return item;
      }).slice(0);
    }
  }

  public setSelectedShowDate(showDateTime: number) {
    if (showDateTime > new Date().getTime()) {
      return;
    }
    this.showDate = showDateTime;
    this.dateTitle = weekDateFormat(this.showDate);
    let selectedInfo = this.dateArr.find((item: WeekDateModel) => item.dateStr === dateToStr(new Date(showDateTime)));
    if (selectedInfo) {
      this.updateSelectedDayInfo(selectedInfo);
    }
    Logger.info('dateTitle', this.dateTitle);
  }

  public getDonePercent(): string {
    let dayInfo = this.selectedDayInfo?.dayInfo;
    Logger.debug("dayInfo", JSON.stringify(dayInfo));
    if (dayInfo && (dayInfo?.finTaskNum || 0) > 0) {
      if (dayInfo.finTaskNum > dayInfo.targetTaskNum) {
        return `${Const.DEFAULT_100}`;
      }
      return `${Math.ceil(dayInfo.finTaskNum / dayInfo.targetTaskNum * Const.DEFAULT_100)}`;
    }
    return '0';
  }

  public getTaskListOfDay(): TaskInfo[] {
    Logger.info('getTaskListOfDay', JSON.stringify(this.selectedDayInfo));
    if (this.selectedDayInfo && this.selectedDayInfo.taskList.length > 0) {
      return this.selectedDayInfo.taskList;
    }
    return [];
  }

  public async taskClock(taskInfo: TaskInfo) {
    let taskItem = await this.updateTask(taskInfo);
    let dateStr = this.selectedDayInfo?.dateStr;
    if (!taskItem) {
      return {
        achievementLevel: 0,
        showAchievement: false
      } as AchievementInfo;
    }

    this.selectedDayInfo.taskList = this.selectedDayInfo.taskList.map((item) => {
      return item.taskID === taskItem?.taskID ? taskItem : item;
    });
    let achievementLevel: number = 0;
    if (taskItem.isDone) {
      let dayInfo = await this.updateDayInfo();
      if (dayInfo && dayInfo?.finTaskNum === dayInfo?.targetTaskNum) {
        achievementLevel = await this.updateAchievement(this.selectedDayInfo.dayInfo);
      }
    }
    this.dateArr = this.dateArr.map((item: WeekDateModel) => dateStr === item.dateStr ? this.selectedDayInfo : item);
    return {
      achievementLevel: achievementLevel,
      showAchievement: ACHIEVEMENT_LEVEL_LIST.includes(achievementLevel)
    } as AchievementInfo;
  }

  // ÂØπ‰ªªÂä°Áä∂ÊÄÅËøõË°åÊõ¥Êñ∞
  // Êñ∞Â¢ûÂ≠óÊÆµ isTargetReached Áî®‰∫éÈÅøÂÖç finValue Ë¢´ targetValue Ë¶ÜÁõñ
  updateTask(task: TaskInfo): Promise<TaskInfo> {
    return new Promise((resolve, reject) => {
      let taskID = task.taskID;
      let targetValue = task.targetValue;
      let finValue = task.finValue;
      let updateTask = new TaskInfo(task.id, task.date, taskID, targetValue, task.isAlarm, task.startTime,
        task.endTime, task.frequency, task.isDone, task.finValue, task.isOpen, task.isTargetReached);
      let step = TaskMapById[taskID - 1].step;
      let hasExceed = updateTask.isDone;
      if (step === 0) {
        updateTask.isDone = true;
        updateTask.finValue = targetValue;
        updateTask.isTargetReached = true;
      } else {
        let value = Number(finValue) + step;
        // Ê≠§Â§ÑÂà§Êñ≠ ‰ªªÂä°ÊòØÂê¶ÂÆåÊàê
        // updateTask.isDone = updateTask.isDone || value >= Number(targetValue);
        // updateTask.finValue = updateTask.isDone ? targetValue : `${value}`;
        Logger.info("ready to find outside",finValue);
        if (value >= Number(targetValue)) {
          updateTask.isDone = true;
          updateTask.isTargetReached = true;
          updateTask.finValue = `${value}`;
          Logger.info("ready to find inside",finValue);
        } else {
          updateTask.finValue = `${value}`;
        }
        task.finValue = updateTask.finValue;
      }
      TaskInfoTableApi.updateDataByDate(updateTask, (res: number) => {
        if (!res || hasExceed) {
          Logger.error('taskClock-updateTask', JSON.stringify(res));
          reject(res);
        }
        resolve(updateTask);
      })
    })
  }

  updateDayInfo(): Promise<DayInfo> {
    let dayInfo: DayInfo = this.selectedDayInfo.dayInfo;
    dayInfo.finTaskNum += 1;
    dayInfo.targetTaskNum = this.selectedDayInfo.taskList.length;
    return new Promise((resolve, reject) => {
      DayInfoApi.updateData(dayInfo, (res: number) => {
        if (!res) {
          Logger.error('taskClock-updateDayInfo', JSON.stringify(res));
          reject(res);
        }
        Logger.info('taskClock-updateDayInfo', JSON.stringify(dayInfo));
        // ÂêåÊ≠•ÁïåÈù¢Êï∞ÊçÆ
        let dayInfoStr = JSON.stringify(dayInfo);
        this.selectedDayInfo.dayInfo = JSON.parse(dayInfoStr);
        resolve(dayInfo);
      });
    });
  }

  updateAchievement(dayInfo: DayInfo): Promise<number> {
    Logger.debug('taskClock-updateAchievement', JSON.stringify(dayInfo));
    return new Promise((resolve, reject) => {
      let preDay = new Date();
      preDay.setDate(preDay.getDate() - 1);
      preDay = new Date(preDay);
      let preDayStr = dateToStr(preDay);
      Logger.info('taskClock-updateAchievement-1', `${preDayStr}`);
      DayInfoApi.query(preDayStr, (res: DayInfo) => {
        Logger.info('taskClock-updateAchievement-2', JSON.stringify(res));
        let isReset = res?.date === '' || res?.targetTaskNum > res?.finTaskNum;
        GlobalInfoApi.query((res: GlobalInfo) => {
          Logger.info('taskClock-globalInfoApi', JSON.stringify(res));
          let achievementInfo = res;
          isReset ? (achievementInfo.checkInDays = 1) : (achievementInfo.checkInDays += 1);
          let isNewAchieve = isReachNewAchievement(achievementInfo);
          if (isNewAchieve) {
            AppStorage.setOrCreate(ACHIEVEMENT_LEVEL_KEY, achievementInfo.checkInDays);
            achievementInfo.achievements = achievementInfo.achievements + ',' + achievementInfo.checkInDays;
          }
          GlobalInfoApi.updateData(achievementInfo, (res: number) => {
            if (!res) {
              Logger.error('taskClock-updateAchievement', JSON.stringify(res));
              reject(res);
            }
            Logger.debug('taskClock-updateAchievement', JSON.stringify(achievementInfo));
            isNewAchieve ? resolve(achievementInfo.checkInDays) : resolve(0);
          });
        });
      })
    });
  }
}¿‘rDù≤@ohos.util.HashMapŸ#../common/constants/CommonConstantsµ../model/TaskInitList™./TaskInfoµ../common/utils/Utils©./DayInfoŸ%../common/database/tables/TaskInfoApiŸ$../common/database/tables/DayInfoApiŸ'../common/database/tables/GlobalInfoApi∂../common/utils/Loggerµ../model/AchieveModel∫../model/WeekCalendarModel∂../model/DatabaseModel‘rEó™assertions®external¢id§meta±moduleSideEffects™resolvedByµsyntheticNamedExportsA√Ÿl hvigor_ignore_C:_Program Files_Huawei_DevEco Studio_sdk_default_openharmony_ets_api_@ohos.util.HashMap.d.ts‘rFëØhostModulesInfoëC≤@ohos.util.HashMap•entry√™oh-resolve¬EA¬ŸjC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\constants\CommonConstants.etsA√™oh-resolve¬EA¬Ÿ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\TaskInitList.etsA√™oh-resolve¬EA¬Ÿ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\viewmodel\TaskInfo.etsA√™oh-resolve¬EA¬Ÿ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\utils\Utils.etsA√™oh-resolve¬EA¬Ÿ[C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\viewmodel\DayInfo.etsA√™oh-resolve¬EA¬ŸlC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\database\tables\TaskInfoApi.etsA√™oh-resolve¬EA¬ŸkC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\database\tables\DayInfoApi.etsA√™oh-resolve¬EA¬ŸnC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\database\tables\GlobalInfoApi.etsA√™oh-resolve¬EA¬Ÿ]C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\common\utils\Logger.etsA√™oh-resolve¬EA¬Ÿ\C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\AchieveModel.etsA√™oh-resolve¬EA¬ŸaC:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\WeekCalendarModel.etsA√™oh-resolve¬EA¬Ÿ]C:\Users\Fanful\IdeaProjects\healthLab\Health_Life\entry\src\main\ets\model\DatabaseModel.etsA√™oh-resolve¬ì‘rGñßversion§file™sourceRootßsources•names®mappings∞HomeViewModel.js†ë±HomeViewModel.etsê‹pêêêêêêëî    êêêêêêêêêêêêëî öî   î î	 	î î î! !î# #î) )îÃN ÃNîÃO ÃOöî   î î	 	î î   î5 5î7 7î= =îÃT ÃTîÃU ÃUöî   î î	 	î î !î, 7î. 9î4 ?îÃK ÃVîÃL ÃWñî   î î î î! !î" "ñî   î î î î î   öî   î î	 	î î î" "î$ $î* *îÃA ÃAîÃB ÃBûî   î î	 	î î î+ +î- -î< <î> >îÃJ ÃJîÃL ÃLîÃR ÃRîÃn ÃnîÃo Ãoñî   î î î î0 0î1 1ñî   î î î îÃD ÃDîÃE ÃEñî   î î î î= =î> >ñî   î î î îÃC ÃCîÃD ÃDñî   î î î î+ +î, ,òî   î î î î( (î) )î* *î8 8ñî  "î "î "î "î "î "ìî +î +î +óî $	î $î $)î $+î $,î $-î. $Ã@‹ î (	î (î (*î# (.î0 (;î1 (<î3 (>î5 (Ã@î7 (ÃBî9 (ÃDî= (ÃHîÃA (ÃLîÃC (ÃNîÃD (ÃOîÃE (ÃPîÃF (ÃQîÃb (Ãmóî )	î )î )0î )4î% );î' )=î( )>óî ,î ,î ,	î ,î ,î& ,"î' ,#öî -î -î -	î -î -î# -î$ - î+ -'î- -)î. -*ùî .î .î .	î .î .î' .#î( .$î3 ./î4 .0î; .7î= .9î> .:î? .;‹ î /î /î /	î /î /î /î  /î$ / î& /"î' /#î- /)î/ /+î2 /.î> /:îÃA /=îÃB />îÃC /?îÃF /ÃBîÃR /ÃNîÃS /ÃOíî 0î 0íî 2î 2íî 3îÃX 3ÃVíî 4î- 4+íî 5îÃJ 5ÃHíî 6îÃU 6ÃSíî 7î 7íî 8îÃ_ 8Ã]íî 9îÃL 9ÃJíî :îÃN :ÃLíî ;î0 ;.íî <îÃC <ÃAíî =î< =:íî >îÃó >Ãïíî ?î= ?;íî Ã@îÃT Ã@ÃRíî ÃAî) ÃA'íî ÃBî= ÃB;íî ÃCî ÃCíî ÃDî ÃDíî ÃEî1 ÃE/íî ÃFî ÃFíî ÃGî7 ÃG5íî ÃHî ÃHíî ÃIî ÃIíî ÃJî ÃJ	íî ÃKî ÃKíî ÃL	î ÃLõî ÃMî ÃMî ÃMî ÃM-î2 ÃMÃ@î3 ÃMÃAî7 ÃMÃEî8 ÃMÃFîÃC ÃMÃQîÃD ÃMÃRîÃE ÃMÃSôî ÃNî ÃNî ÃN	î ÃNî ÃNî' ÃN#î( ÃN$î+ ÃN'î, ÃN(üî ÃOî ÃO
î ÃOî ÃOî ÃOî& ÃO"î( ÃO$î, ÃO(î- ÃO)î8 ÃO4î9 ÃO5îÃE ÃOÃAîÃG ÃOÃCîÃH ÃOÃDîÃI ÃOÃE‹ î ÃPî ÃP
î ÃPî ÃPî ÃPî* ÃP&î, ÃP(î0 ÃP,î1 ÃP-î: ÃP6î; ÃP7îÃK ÃPÃGîÃL ÃPÃHîÃR ÃPÃNîÃS ÃPÃOîÃT ÃPÃPîÃU ÃPÃPíî ÃQî ÃQ‹ î ÃRî ÃRî ÃRî ÃRî ÃRî# ÃRî$ ÃR î( ÃR$î, ÃR(î. ÃR*î/ ÃR+î1 ÃR-î2 ÃR.î: ÃRÃBî< ÃRÃDîÃC ÃRÃTîÃE ÃRÃVîÃG ÃRÃXüî ÃSî ÃSî ÃSî ÃSî ÃSî1 ÃS+î3 ÃS-î7 ÃS1î8 ÃS2îÃA ÃS;îÃB ÃS<îÃJ ÃSÃDîÃK ÃSÃEîÃL ÃSÃFîÃM ÃSÃGùî ÃTî ÃTî ÃTî  ÃTî! ÃTî1 ÃT+î2 ÃT,î8 ÃT2î: ÃT4î; ÃT5î> ÃTÃCîÃ@ ÃTÃEîÃB ÃTÃGõî ÃUî ÃUî ÃUî ÃUî" ÃUî# ÃUî) ÃU!î* ÃU"î1 ÃU)î2 ÃU*î3 ÃU+üî ÃVî ÃVî ÃVî ÃVî ÃVî/ ÃV'î1 ÃV)î5 ÃV-î6 ÃV.î? ÃV7îÃ@ ÃV8îÃC ÃV;îÃD ÃV<îÃE ÃV=îÃF ÃV>‹ î ÃWî ÃWî ÃWî ÃWî ÃWî ÃWî  ÃWî! ÃWî$ ÃWî( ÃW î) ÃW!î0 ÃW(î1 ÃW)î7 ÃW/î9 ÃW1î: ÃW2î< ÃW4î> ÃW6‹ ,î ÃX
î ÃXî# ÃXî& ÃXî. ÃX$î/ ÃX%î3 ÃX)î4 ÃX*î5 ÃX+î9 ÃX8î; ÃX:î= ÃX<î> ÃX=îÃB ÃXÃAîÃC ÃXÃBîÃG ÃXÃFîÃL ÃXÃKîÃP ÃXÃOîÃQ ÃXÃPîÃX ÃXÃWîÃY ÃXÃXîÃZ ÃXÃYîÃ[ ÃXÃZîÃ\ ÃXÃ[îÃc ÃXÃbîÃd ÃXÃcîÃh ÃXÃgîÃl ÃXÃkîÃs ÃXÃrîÃt ÃXÃsîÃx ÃXÃwîÃy ÃXÃxîÃÄ ÃXÃîÃÅ ÃXÃÄîÃÇ ÃXÃÅîÃÉ ÃXÃÇîÃÑ ÃXÃÉîÃã ÃXÃäîÃç ÃXÃåîÃé ÃXÃçîÃê ÃXÃèîÃë ÃXÃêîÃí ÃXÃëîÃì ÃXÃíúî ÃY
î$ ÃYî% ÃYî( ÃYî) ÃYî* ÃY î+ ÃY!î, ÃY"î3 ÃY)î6 ÃY,îÃA ÃY7îÃB ÃY8‹ î ÃZ
î ÃZî ÃZî ÃZî$ ÃZî% ÃZî& ÃZî' ÃZî( ÃZî/ ÃZ%î4 ÃZ*î= ÃZ3î> ÃZ4îÃB ÃZ8îÃF ÃZ<îÃG ÃZ=îÃK ÃZÃAîÃL ÃZÃBîÃT ÃZÃJîÃU ÃZÃKîÃV ÃZÃLîÃX ÃZÃNíî Ã[î0 Ã[$úî Ã\î( Ã\î) Ã\î, Ã\ î- Ã\!î. Ã\"î/ Ã\#î0 Ã\$î8 Ã\,î; Ã\/îÃC Ã\7îÃD Ã\8ëî Ã]ëî Ã^	íî Ã_î1 Ã_)íî Ã`îÃù Ã`Ãïíî ÃaîÃC Ãa;íî ÃbîÃZ ÃbÃRíî Ãcî/ Ãc'íî ÃdîÃC Ãd;íî Ãeî Ãeíî Ãfî Ãfôî Ãgî Ãgî Ãgî Ãgî Ãgî/ Ãg'î0 Ãg(î3 Ãg+î4 Ãg,ôî Ãhî Ãhî Ãhî Ãhî! Ãhî% Ãhî& Ãhî- Ãh%î/ Ãh'íî Ãi
îÃI Ãi?‹ î Ãj
î Ãjî Ãjî# Ãjî$ Ãjî' Ãjî( Ãjî. Ãj$î/ Ãj%î3 Ãj)î4 Ãj*î8 Ãj.î9 Ãj/î; Ãj1î? Ãj5îÃ@ Ãj6îÃG Ãj=îÃH Ãj>îÃI Ãj?ëî Ãk	ïî Ãlî Ãlî Ãlî Ãlî  Ãlöî Ãm
î Ãmî Ãmî, Ãm"î- Ãm#î1 Ãm'î2 Ãm(î: Ãm0î; Ãm1î< Ãm2ñî Ãnî Ãn	î Ãnî Ãnî Ãnî Ãnîî Ãoî Ãoî Ãoî Ãoîî Ãpî	 Ãpî
 Ãpî Ãpíî Ãqî Ãqñî Ãs	î Ãsî Ãsî Ãs"î Ãs$î! Ãs6ôî Ãtî Ãtî Ãtî Ãt-î. Ãt<î/ Ãt=î3 ÃtÃAî4 ÃtÃBî5 ÃtÃCíî Ãuî Ãuùî Ãvî Ãvî Ãvî Ãvî Ãvî- Ãv)î. Ãv*î4 Ãv0î6 Ãv2î7 Ãv3î: ÃvÃAî< ÃvÃCî> ÃvÃEüî Ãwî Ãwî Ãwî Ãwî Ãwî7 Ãw1î9 Ãw3î= Ãw7î> Ãw8îÃG ÃwÃAîÃH ÃwÃBîÃK ÃwÃEîÃL ÃwÃFîÃM ÃwÃGîÃN ÃwÃHòî Ãxî Ãx
î Ãxî Ãxî Ãxî Ãxî Ãxî  Ãx‹ î Ãyî Ãyî Ãyî Ãyî Ãyî Ãyî  Ãyî! Ãyî$ Ãyî4 Ãy,î5 Ãy-î8 Ãy0î9 Ãy1î? Ãy7îÃA Ãy9îÃB Ãy:îÃD Ãy<îÃF Ãy>‹ î Ãz
î Ãzî Ãzî" Ãzî% Ãzî& Ãzî* Ãz î+ Ãz!î, Ãz"î0 Ãz&î2 Ãz(î4 Ãz*î5 Ãz+î9 Ãz/î: Ãz0î> Ãz4îÃC Ãz9îÃS ÃzÃIîÃT ÃzÃJîÃW ÃzÃMîÃX ÃzÃNîÃY ÃzÃOîÃZ ÃzÃPîÃ[ ÃzÃQîÃb ÃzÃXîÃc ÃzÃYîÃd ÃzÃZîî Ã{
î Ã{î Ã{î! Ã{úî Ã|î( Ã|î) Ã|î, Ã| î- Ã|!î. Ã|"î/ Ã|#î0 Ã|$î7 Ã|+î: Ã|.îÃA Ã|5îÃB Ã|6ëî Ã}ëî Ã~	ëî Ã‹ î ÃÄî ÃÄ
î ÃÄî ÃÄî ÃÄî+ ÃÄ%î, ÃÄ&î/ ÃÄ)î0 ÃÄ*î6 ÃÄ0î7 ÃÄ1î: ÃÄ4î> ÃÄ8î? ÃÄ9îÃF ÃÄÃ@îÃG ÃÄÃAîÃH ÃÄÃBîî ÃÅî ÃÅî ÃÅî ÃÅîî ÃÇî	 ÃÇî
 ÃÇî ÃÇíî ÃÉî ÃÉíî ÃÖî ÃÖíî ÃÜ	î ÃÜüî Ãáî Ãáî Ãáî Ãáî Ãáî! Ãáî# Ãáî$ Ãá î) Ãá%î- Ãá)î. Ãá*î= Ãá9î? Ãá;îÃF ÃáÃBîÃG ÃáÃCíî Ãàî Ãàîî Ãä	î Ãäî Ãäî) Ãä=üî Ããî Ãã
î Ããî Ããî Ããî, Ãã(î. Ãã*î2 Ãã.î3 Ãã/î< Ãã8î= Ãã9îÃL ÃãÃHîÃM ÃãÃIîÃN ÃãÃJîÃO ÃãÃKöî Ãåî Ãåî Ãåî Ãåî$ Ãå î& Ãå"î, Ãå(î1 Ãå-î2 Ãå.î4 Ãå0íî Ãçî Ãçüî Ãéî Ãéî Ãéî" Ãéî# Ãéî2 Ãé,î3 Ãé-î: Ãé4î< Ãé6îÃ@ Ãé:îÃB Ãé<îÃC Ãé=îÃF ÃéÃLîÃH ÃéÃNîÃJ ÃéÃPüî Ãèî Ãèî Ãèî Ãèî Ãèî5 Ãè-î7 Ãè/î; Ãè3î< Ãè4îÃE Ãè=îÃF Ãè>îÃI ÃèÃAîÃJ ÃèÃBîÃK ÃèÃCîÃL ÃèÃDóî Ãêî Ãêî  Ãêî( Ãê î+ Ãê#î. Ãê&î/ Ãê'üî Ãëî Ãëî Ãëî Ãëî Ãëî# Ãëî$ Ãëî+ Ãë#î, Ãë$î/ Ãë'î0 Ãë(î1 Ãë)î5 Ãë<î7 Ãë>î9 ÃëÃ@öî Ãí
î Ãíî Ãíî Ãíî$ Ãíî) Ãíî8 Ãí.î9 Ãí/îÃ@ Ãí6îÃB Ãí8õî Ãìî Ãìî' Ãìî* Ãìî. Ãì"î/ Ãì#î8 Ãì,î9 Ãì-î< Ãì0î= Ãì1î> Ãì2úî Ãîî Ãîî Ãîî% Ãîî( Ãîî, Ãî î- Ãî!î2 Ãî&î3 Ãî'î> Ãî2î? Ãî3îÃ@ Ãî4îî Ãïî Ãïî# Ãïî$ Ãïëî Ãñëî Ãñîî Ãóî Ãóî# Ãóî$ Ãóëî Ãòîî Ãôî Ãô	î Ãô
î Ãô
óî Ãöî Ãöî Ãöî$ Ãöî' Ãöî6 Ãö.î7 Ãö/îî Ãõî Ãõî Ãõî Ãõ	ëî	 Ãúëî Ãúóî Ãùî Ãù
î Ãùî  Ãùî# Ãùî2 Ãù,î3 Ãù-ëî	 Ãû‹ î Ãüî Ãü
î Ãüî Ãüî Ãüî+ Ãü'î- Ãü)î1 Ãü-î2 Ãü.î; Ãü7î< Ãü8îÃK ÃüÃGîÃL ÃüÃHîÃT ÃüÃPîÃU ÃüÃQîÃV ÃüÃRîÃW ÃüÃSíî Ã†î Ã†îî Ã¢	î Ã¢î Ã¢î% Ã¢5ñî Ã£î Ã£î Ã£î Ã£î" Ã£î$ Ã£ íî Ã§î Ã§òî Ã•î Ã•
î Ã•î Ã•î' Ã•!î( Ã•"î. Ã•(î/ Ã•)òî Ã¶î Ã¶
î Ã¶î Ã¶î, Ã¶&î- Ã¶'î8 Ã¶2î9 Ã¶3òî Ãßî Ãß
î Ãßî Ãßî( Ãß"î) Ãß#î0 Ãß*î1 Ãß+òî Ã®î Ã®
î Ã®î Ã®î* Ã®$î+ Ã®%î4 Ã®.î5 Ã®/òî Ã©î Ã©
î Ã©î Ã©î* Ã©$î+ Ã©%î4 Ã©.î5 Ã©/òî Ã™î Ã™
î Ã™î Ã™î( Ã™"î) Ã™#î0 Ã™*î1 Ã™+òî Ã´î Ã´
î Ã´î Ã´î' Ã´!î( Ã´"î. Ã´(î/ Ã´)íî Ã¨îÃR Ã¨ÃLëî Ã≠ëîÃJ ÃÆÃD‹ #î ÃØî ÃØ
î ÃØî ÃØî ÃØî# ÃØî$ ÃØî% ÃØî' ÃØ!î0 ÃØ*î1 ÃØ+î5 ÃØ/î9 ÃØ3î; ÃØ5î< ÃØ6î> ÃØ8îÃD ÃØ>îÃF ÃØÃ@îÃQ ÃØÃKîÃS ÃØÃMîÃZ ÃØÃTîÃ\ Ã∞îÃe Ã∞îÃg Ã∞îÃn Ã∞îÃp Ã∞îÃy Ã∞%îÃ{ Ã∞'îÃÄ Ã∞,îÃÇ Ã∞.îÃÑ Ã∞0îÃÜ Ã∞2îÃå Ã∞8îÃç Ã∞9îÃé Ã∞:üî Ã±î Ã±
î Ã±î Ã±î Ã±î Ã±î  Ã±î' Ã±!î( Ã±"î+ Ã±%î, Ã±&î- Ã±'î1 Ã±:î3 Ã±<î5 Ã±>öî Ã≤î Ã≤î Ã≤î Ã≤î Ã≤î" Ã≤î& Ã≤î' Ã≤î. Ã≤&î0 Ã≤(üî Ã≥
î Ã≥î Ã≥î Ã≥î  Ã≥î& Ã≥î( Ã≥î, Ã≥"î- Ã≥#î6 Ã≥,î7 Ã≥-î; Ã≥1î< Ã≥2î= Ã≥3î> Ã≥4òî Ã¥
î Ã¥î  Ã¥î# Ã¥%î' Ã¥)î( Ã¥*î0 Ã¥2î1 Ã¥3òî Ãµ
î Ãµî! Ãµî$ Ãµ#î( Ãµ'î) Ãµ(î0 Ãµ/î1 Ãµ0ñî Ã∂
î Ã∂î& Ã∂î' Ã∂î- Ã∂#î/ Ã∂%íî Ã∑î# Ã∑‹ î Ã∏î  Ã∏î# Ã∏î+ Ã∏î, Ã∏ î2 Ã∏&î3 Ã∏'î4 Ã∏(î< Ã∏0î> Ã∏2îÃ@ Ã∏4îÃA Ã∏5îÃI Ã∏=îÃJ Ã∏>îÃP Ã∏ÃDîÃT Ã∏ÃHîÃZ Ã∏ÃNîÃ[ Ã∏ÃOïî Ãπî# Ãπî$ Ãπî( Ãπî) Ãπ‹ î Ã∫î! Ã∫î" Ã∫î# Ã∫î$ Ã∫î& Ã∫î' Ã∫î) Ã∫î+ Ã∫î, Ã∫î- Ã∫î. Ã∫ î4 Ã∫&î7 Ã∫)î8 Ã∫*î9 Ã∫+î? Ã∫1îÃ@ Ã∫2îÃA Ã∫3ñî Ãªî Ãªî! Ãªî$ Ãª î% Ãª!î& Ãª"ôî Ãºî  Ãºî! Ãºî( Ãºî) Ãºî* Ãºî2 Ãº0î4 Ãº2î6 Ãº4ñî ÃΩî  ÃΩî( ÃΩî) ÃΩî/ ÃΩ!î1 ÃΩ#îî  Ãæî% Ãæî' Ãæî( Ãæëî Ãøîî Ã¿î Ã¿î Ã¿î Ã¿òî Ã¡î Ã¡î! Ã¡î$ Ã¡î+ Ã¡î, Ã¡ î6 Ã¡*î8 Ã¡,óî Ã¬î# Ã¬î$ Ã¬î. Ã¬ î1 Ã¬#î6 Ã¬(î7 Ã¬)ëî Ã√ëî Ãƒëî Ãƒíî Ã≈î& Ã≈‹ î Ã∆î Ã∆î% Ã∆î( Ã∆î0 Ã∆$î1 Ã∆%î: Ã∆.î; Ã∆/î< Ã∆0îÃD Ã∆8îÃF Ã∆:îÃH Ã∆<îÃI Ã∆=îÃQ Ã∆ÃEîÃR Ã∆ÃFîÃX Ã∆ÃLîÃ] Ã∆ÃQîÃc Ã∆ÃWîÃd Ã∆ÃXîÃe Ã∆ÃY‹ î Ã«î Ã«î Ã«î# Ã«î$ Ã«î9 Ã«-î; Ã«/î? Ã«3îÃ@ Ã«4îÃI Ã«=îÃJ Ã«>îÃR Ã«ÃFîÃS Ã«ÃGîÃ\ Ã«ÃPîÃ] Ã«ÃQîÃ^ Ã«ÃRîÃ_ Ã«ÃSîÃ` Ã«ÃTôî Ã»î Ã»î$ Ã»î% Ã»î. Ã»"î/ Ã»#î1 Ã»%î7 Ã»+î9 Ã»-óî Ã…î# Ã…î$ Ã…î. Ã… î2 Ã…$î3 Ã…%î4 Ã…&ëî Ã ‹ î ÃÀî  ÃÀî# ÃÀî+ ÃÀî, ÃÀ î2 ÃÀ&î3 ÃÀ'î4 ÃÀ(î< ÃÀ0î> ÃÀ2îÃ@ ÃÀ4îÃA ÃÀ5îÃI ÃÀ=îÃJ ÃÀ>îÃP ÃÀÃDîÃT ÃÀÃHîÃZ ÃÀÃNîÃ[ ÃÀÃOîÃ\ ÃÀÃPëî ÃÃôî ÃÕ
î ÃÕî ÃÕî) ÃÕî, ÃÕ"î4 ÃÕ*î5 ÃÕ+î; ÃÕ1î< ÃÕ2öî ÃŒ
î ÃŒî ÃŒî  ÃŒî* ÃŒ î- ÃŒ#î4 ÃŒ*î5 ÃŒ+îÃB ÃŒ8îÃD ÃŒ:ôî Ãœî Ãœî  Ãœî* Ãœî- Ãœ!î4 Ãœ(î5 Ãœ)îÃB Ãœ6îÃC Ãœ7ëî Ã–ôî Ã—
î Ã—î Ã—î) Ã—î* Ã— î1 Ã—'î3 Ã—)î6 Ã—,î8 Ã—.îî Ã“
î Ã“î Ã“î Ã“üî Ã”
î Ã”î Ã”î  Ã”î! Ã”î. Ã”$î0 Ã”&î4 Ã”*î5 Ã”+î> Ã”4î? Ã”5îÃF Ã”<îÃG Ã”=îÃH Ã”>îÃI Ã”?õî Ã‘
î Ã‘î( Ã‘î+ Ã‘!î/ Ã‘%î0 Ã‘&î9 Ã‘/î: Ã‘0î> Ã‘4î? Ã‘5îÃ@ Ã‘6õî Ã’
î Ã’î& Ã’î) Ã’.î- Ã’2î. Ã’3î3 Ã’8î4 Ã’9îÃD Ã’ÃIîÃE Ã’ÃJîÃF Ã’ÃKôî Ã÷
î" Ã÷î# Ã÷î' Ã÷î* Ã÷ î. Ã÷$î/ Ã÷%î3 Ã÷)î4 Ã÷*óî Ã◊
î" Ã◊î# Ã◊î+ Ã◊!î. Ã◊$î6 Ã◊,î7 Ã◊-óî Ãÿ
î" Ãÿî# Ãÿî* Ãÿ î- Ãÿ#î4 Ãÿ*î5 Ãÿ+óî ÃŸ
î ÃŸî ÃŸî ÃŸî, ÃŸ"î. ÃŸ$î0 ÃŸ&óî Ã⁄î Ã⁄î Ã⁄î, Ã⁄ î/ Ã⁄#î= Ã⁄1î> Ã⁄2ëî Ã€îî Ã‹
î Ã‹î) Ã‹î* Ã‹ ëî Ã›	îî Ãﬁî Ãﬁî Ãﬁî Ãﬁôî Ãﬂî Ãﬂî Ãﬂî Ãﬂ	î Ãﬂî Ãﬂî Ãﬂî Ãﬂî Ãﬂëî	 Ã‡íî Ã·î Ã·îî Ã„	î Ã„î Ã„î$ Ã„1õî Ã‰î Ã‰î Ã‰î Ã‰î Ã‰î# Ã‰î% Ã‰!î& Ã‰"î- Ã‰)î/ Ã‰+î1 Ã‰-íî ÃÂî ÃÂëî	 ÃÊóî ÃÁî ÃÁî ÃÁ	î ÃÁî ÃÁî$ ÃÁ î% ÃÁ!úî ÃËî ÃËî ÃË	î ÃËî ÃËî' ÃË#î( ÃË$î, ÃË(î- ÃË)î5 ÃË1î6 ÃË2î7 ÃË3‹ î ÃÈî ÃÈî ÃÈî ÃÈî ÃÈî  ÃÈî' ÃÈ#î( ÃÈ$î, ÃÈ(î- ÃÈ)î. ÃÈ*î2 ÃÈ=î4 ÃÈ?î6 ÃÈÃAî7 ÃÈÃBî; ÃÈÃFî< ÃÈÃGîÃC ÃÈÃNîÃH ÃÈÃSîÃQ ÃÈÃ\îÃR ÃÈÃ]îÃV ÃÈÃaîÃZ ÃÈÃeîÃ[ ÃÈÃfîÃg ÃÈÃrîÃh ÃÈÃsîÃi ÃÈÃtîÃj ÃÈÃuîÃk ÃÈÃvîî ÃÍî ÃÍî ÃÍî ÃÍòî ÃÎî ÃÎ
î ÃÎî& ÃÎ î' ÃÎ!î3 ÃÎ-î4 ÃÎ.î5 ÃÎ/ëî	 ÃÏúî ÃÌî ÃÌ
î ÃÌî ÃÌî ÃÌî ÃÌî! ÃÌî% ÃÌ!î& ÃÌ"î/ ÃÌ+î0 ÃÌ,î1 ÃÌ-íî ÃÓî ÃÓíî Ã	î Ãöî ÃÒî ÃÒî ÃÒî ÃÒî ÃÒî ÃÒî* ÃÒ&î, ÃÒ(î3 ÃÒ/î4 ÃÒ0üî ÃÚî ÃÚ
î ÃÚî ÃÚî ÃÚî ÃÚî  ÃÚî$ ÃÚ î% ÃÚ!î. ÃÚ*î/ ÃÚ+î6 ÃÚ2î7 ÃÚ3î8 ÃÚ4î9 ÃÚ5ûî ÃÛî ÃÛî ÃÛî ÃÛî ÃÛî ÃÛî! ÃÛî+ ÃÛ'î/ ÃÛ+î0 ÃÛ,î1 ÃÛ-î4 ÃÛ0î5 ÃÛ1î7 ÃÛ3öî ÃÙî ÃÙ
î ÃÙî ÃÙî" ÃÙî% ÃÙî, ÃÙ&î- ÃÙ'î: ÃÙ4î< ÃÙ6òî Ãıî Ãıî Ãıî Ãıî  Ãıî+ Ãı#î- Ãı%î. Ãı&ëî Ãˆ‹ î Ã˜î Ã˜î Ã˜î Ã˜î Ã˜î Ã˜î  Ã˜î' Ã˜!î( Ã˜"î2 Ã˜,î5 Ã˜/î< Ã˜6î= Ã˜7îÃJ Ã˜ÃDîÃM Ã˜ÃGîÃR Ã˜ÃLîÃS Ã˜ÃMîÃ^ Ã˜ÃXîÃ_ Ã˜ÃYîÃa Ã˜Ã[îÃb Ã˜Ã\ëî	 Ã¯îî Ã˘î Ã˘î Ã˘î Ã˘íî Ã˙î Ã˙íî Ã¸	î Ã¸‹ î Ã˝î Ã˝
î Ã˝î Ã˝î Ã˝î& Ã˝"î( Ã˝$î, Ã˝(î- Ã˝)î6 Ã˝2î7 Ã˝3î; Ã˝7î< Ã˝8îÃK Ã˝ÃGîÃL Ã˝ÃHîÃM Ã˝ÃIîÃN Ã˝ÃJ‹ î Ã˛î Ã˛î Ã˛î Ã˛î  Ã˛î$ Ã˛ î( Ã˛$î) Ã˛%î8 Ã˛4î9 Ã˛5îÃA Ã˛=îÃB Ã˛>îÃH Ã˛ÃDîÃK Ã˛ÃGîÃL Ã˛ÃHîÃN Ã˛ÃJòî Ãˇî Ãˇî Ãˇî Ãˇî' Ãˇ!î( Ãˇ"î0 Ãˇ*î1 Ãˇ+ëî	 Õ îî Õî Õî Õî Õíî Õî Õñî Õ	î	 Õî
 Õî Õî Õî Õ+úî Õî Õî Õî Õî Õî! Õî" Õî, Õ(î- Õ)î5 Õ1î6 Õ2î7 Õ3öî Õî Õî Õî Õî Õî Õî* Õ&î, Õ(î3 Õ/î4 Õ0ïî Õî Õî Õ	î Õî Õíî Õî Õîî Õ	î  Õ	î" Õ	î# Õ	îî Õ
î Õ
î! Õ
î& Õ
íî Õî Õëî	 Õ‹ î Õî Õî Õ	î Õî Õî% Õ!î( Õ$î, Õ(î- Õ)î< Õ8î= Õ9îÃE ÕÃAîÃF ÕÃBîÃI ÕÃEîÃJ ÕÃFîÃK ÕÃGîÃO ÕÃKîÃQ ÕÃMîÃS ÕÃO‹ î Õî Õî Õî Õî Õî# Õî+ Õ%î- Õ'î3 Õ-î4 Õ.î5 Õ/î6 Õ0î> Õ8î? Õ9îÃ@ Õ:îÃA Õ;îÃE Õ?îÃF ÕÃ@îî Õî	 Õî
 Õî Õñî Õî Õî Õî Õ#î  Õ$î! Õ%ñî Õî Õî Õî Õî Õî Õöî Õî Õ
î Õî Õî  Õî$ Õî% Õî2 Õ,î4 Õ.î5 Õ/úî Õî Õ
î Õî Õî" Õî$ Õî. Õ(î3 Õ-î: Õ4î< Õ6îÃI ÕÃCîÃK ÕÃEüî Õî  Õî# Õî) Õ!î- Õ%î. Õ&î? Õ7îÃ@ Õ8îÃD Õ<îÃE Õ=îÃT ÕÃLîÃU ÕÃMîÃ\ ÕÃTîÃ] ÕÃUîÃ^ ÕÃVëî Õëî	 Õ‹ !î Õî Õî Õ	î Õî Õî Õî Õî# Õî$ Õ î' Õ#î( Õ$î) Õ%î- Õ8î/ Õ:î1 Õ<î2 Õ=î9 ÕÃDî> ÕÃIîÃB ÕÃMîÃC ÕÃNîÃJ ÕÃUîÃK ÕÃVîÃL ÕÃWîÃM ÕÃXîÃQ ÕÃ\îÃR ÕÃ]îÃa ÕÃlîÃb ÕÃmîÃc ÕÃnîÃd ÕÃoîÃh ÕÃsîÃi ÕÃtîÃj ÕÃuíî Õî Õîî Õî Õî Õî. Õ(ôî Õî Õî Õî3 Õ-î4 Õ.î< Õ6î= Õ7îÃM ÕÃGîÃN ÕÃHíî	 Õî
 Õíî Õî Õíî Õî Õíî Õ î: Õ 8îî Õ!î Õ!î Õ!î Õ!õî Õ"î Õ"î Õ"î Õ"î Õ"î Õ"î# Õ"î% Õ"!î+ Õ"'î- Õ")î/ Õ"+òî Õ#î Õ#
î Õ#î Õ#î Õ#î Õ#î$ Õ#î% Õ#òî Õ$î Õ$
î Õ$î Õ$î" Õ$î# Õ$î. Õ$(î/ Õ$)òî Õ%î Õ%
î Õ%î Õ%î Õ%î  Õ%î( Õ%"î) Õ%#‹ 4î Õ&î Õ&
î Õ&î Õ&î! Õ&î) Õ&#î* Õ&$î. Õ&(î/ Õ&)î1 Õ&+î3 Õ&-î7 Õ&1î8 Õ&2î< Õ&6î> Õ&8îÃD Õ&>îÃF Õ&Ã@îÃQ Õ&ÃKîÃS Õ&ÃMîÃW Õ&ÃQîÃX Õ&ÃRîÃ_ Õ&ÃYîÃa Õ&Ã[îÃe Õ&Ã_îÃf Õ&Ã`îÃo Õ&ÃiîÃq Õ'îÃu Õ'îÃv Õ'îÃ} Õ'îÃ Õ'îÃÉ Õ'îÃÑ Õ'îÃç Õ'$îÃè Õ'&îÃì Õ'*îÃî Õ'+îÃö Õ'1îÃú Õ'3îÃ† Õ'7îÃ° Õ'8îÃ© Õ'Ã@îÃ´ Õ'ÃBîÃØ Õ'ÃFîÃ∞ Õ'ÃGîÃ∂ Õ'ÃMîÃ∏ Õ'ÃOîÃº Õ'ÃSîÃΩ Õ'ÃTîÃÃ Õ'ÃcîÃÕ Õ'ÃdîÃŒ Õ'Ãeùî Õ(î Õ(
î Õ(î Õ(î" Õ(î# Õ(î) Õ(#î, Õ(&î- Õ('î. Õ((î/ Õ()î3 Õ(-î4 Õ(.òî Õ)î Õ)
î Õ)î Õ)î& Õ) î' Õ)!î- Õ)'î. Õ)(ñî Õ*î Õ*
î Õ*î Õ*î Õ*î Õ*óî Õ+î Õ+î Õ+î! Õ+î$ Õ+î( Õ+ î) Õ+!óî Õ,î Õ,î Õ,î# Õ,î& Õ,î1 Õ,)î2 Õ,*óî Õ-î Õ-î Õ-î* Õ-"î- Õ-%î1 Õ-)î2 Õ-*ëî Õ.ëî Õ.õî Õ/î Õ/î Õ/î Õ/î" Õ/î# Õ/î+ Õ/#î, Õ/$î/ Õ/'î3 Õ/+î4 Õ/,íî Õ0î Õ0íî Õ1îÃY Õ1ÃQíî Õ2îÃV Õ2ÃNöî Õ3î Õ3î Õ3î Õ3î Õ3î3 Õ3+î5 Õ3,î= Õ34î> Õ35î? Õ36ôî Õ4î Õ4î Õ4î Õ4î# Õ4î$ Õ4î/ Õ4'î0 Õ4(î2 Õ4*óî Õ5
î Õ5î Õ5î% Õ5î( Õ5î, Õ5"î- Õ5#óî Õ6
î Õ6î Õ6î. Õ6$î1 Õ6'î5 Õ6+î6 Õ6,ôî Õ7
î Õ7î Õ7î' Õ7î* Õ7 î- Õ7#î2 Õ7(î4 Õ7*î5 Õ7+öî Õ8
î Õ8î Õ8î Õ8î  Õ8î6 Õ8,î8 Õ8-îÃ@ Õ85îÃA Õ86îÃB Õ87ëî Õ9	ëî Õ9ôî Õ:
î Õ:î Õ:î' Õ:î* Õ: î- Õ:#î2 Õ:(î4 Õ:*î5 Õ:+ëî Õ;	ôî Õ<î Õ<î Õ<î Õ<î  Õ<î* Õ<"î+ Õ<#î3 Õ<+î4 Õ<,ëî Õ=õî Õ>î Õ>î Õ>î- Õ>'î. Õ>(î8 Õ>2î: Õ>4î; Õ>5î> Õ>Ã@îÃ@ Õ>ÃBîÃB Õ>ÃDóî Õ?î Õ?î Õ?î Õ?î Õ?î% Õ?î' Õ?üî Õ@
î Õ@î Õ@î  Õ@î! Õ@î7 Õ@-î9 Õ@/î= Õ@3î> Õ@4îÃG Õ@=îÃH Õ@>îÃK Õ@ÃAîÃL Õ@ÃBîÃM Õ@ÃCîÃN Õ@ÃDñî ÕA
î ÕAî ÕAî ÕAî ÕAî  ÕAëî ÕB	ñî ÕCî ÕCî ÕCî" ÕCî# ÕCî$ ÕCîî ÕDî ÕDî ÕDî ÕDîî ÕEî	 ÕEî
 ÕEî ÕEíî ÕFî ÕFíî ÕHî ÕHöî ÕIî ÕIî ÕIî ÕIî ÕIî ÕI î* ÕI/î+ ÕI0î2 ÕI7î3 ÕI8óî ÕJî ÕJî ÕJî ÕJî ÕJî ÕJî  ÕJùî ÕKî ÕKî ÕKî ÕKî  ÕKî$ ÕK î% ÕK!î4 ÕK0î5 ÕK1î= ÕK9î> ÕK:îÃD ÕKÃ@îÃE ÕKÃAõî ÕLî ÕLî ÕLî ÕLî ÕLî ÕLî# ÕLî% ÕL!î+ ÕL'î- ÕL)î/ ÕL+õî ÕMî ÕMî ÕMî! ÕMî" ÕMî) ÕM#î+ ÕM%î, ÕM&î/ ÕM1î1 ÕM3î3 ÕM5ïî ÕNî ÕNî ÕNî ÕNî ÕNüî ÕO
î ÕOî ÕOî  ÕOî! ÕOî: ÕO0î< ÕO2îÃ@ ÕO6îÃA ÕO7îÃJ ÕOÃ@îÃK ÕOÃAîÃN ÕOÃDîÃO ÕOÃEîÃP ÕOÃFîÃQ ÕOÃGñî ÕP
î ÕPî ÕPî ÕPî ÕPî  ÕPëî ÕQ	üî ÕRî ÕRî ÕRî ÕRî ÕRî5 ÕR-î7 ÕR/î; ÕR3î< ÕR4îÃE ÕR=îÃF ÕR>îÃM ÕRÃEîÃN ÕRÃFîÃO ÕRÃGîÃP ÕRÃHíî ÕSî ÕSõî ÕTî ÕTî ÕTî! ÕTî% ÕTî& ÕTî/ ÕT'î0 ÕT(î7 ÕT/î8 ÕT0î9 ÕT1ûî ÕUî ÕUî ÕUî$ ÕUî% ÕUî, ÕU$î/ ÕU'î3 ÕU+î4 ÕU,î9 ÕU1î: ÕU2îÃD ÕU<îÃE ÕU=îÃF ÕU>ñî ÕVî ÕVî ÕVî ÕVî  ÕVî! ÕVîî ÕWî ÕWî ÕWî ÕW	îî ÕXî	 ÕXî
 ÕXî ÕXíî ÕYî ÕYîî Õ[î Õ[î Õ[î Õ[$üî Õ\î Õ\
î Õ\î Õ\î Õ\î2 Õ\.î4 Õ\0î8 Õ\4î9 Õ\5îÃB Õ\>îÃC Õ\?îÃJ Õ\ÃFîÃK Õ\ÃGîÃL Õ\ÃHîÃM Õ\ÃIõî Õ]î Õ]î Õ]î Õ]î Õ]î Õ]î# Õ]î% Õ]!î+ Õ]'î- Õ])î/ Õ]+òî Õ^î Õ^
î Õ^î Õ^î Õ^î! Õ^î# Õ^î$ Õ^ùî Õ_î Õ_î Õ_î Õ_î Õ_î! Õ_î" Õ_î) Õ_#î+ Õ_%î. Õ_(î/ Õ_)î0 Õ_*î1 Õ_+ôî Õ`î Õ`î Õ`î Õ`î Õ`î Õ`î$ Õ`î% Õ`î& Õ` ôî Õaî Õa
î Õaî Õaî% Õaî& Õa î, Õa&î- Õa'î. Õa(úî Õbî Õbî Õbî Õbî Õbî7 Õb1î9 Õb3î< Õb6îÃE Õb?îÃG ÕbÃAîÃH ÕbÃBîÃI ÕbÃCõî Õcî Õcî Õcî Õcî Õcî& Õc î( Õc"î) Õc#î, Õc/î. Õc1î0 Õc3üî Õdî Õdî Õdî Õdî Õdî; Õd3î= Õd5îÃA Õd9îÃB Õd:îÃK ÕdÃCîÃL ÕdÃDîÃO ÕdÃGîÃP ÕdÃHîÃQ ÕdÃIîÃR ÕdÃJ‹ î Õeî Õeî Õeî Õeî! Õeî# Õeî' Õeî, Õe$î. Õe&î2 Õe*î5 Õe-î7 Õe/îÃD Õe<îÃG Õe?îÃJ ÕeÃBîÃL ÕeÃDîÃV ÕeÃNîÃW ÕeÃOôî Õfî Õfî Õfî# Õfî$ Õfî% Õfî( Õf,î* Õf.î, Õf0üî Õg
î Õgî Õgî Õgî  Õgî9 Õg/î; Õg1î? Õg5îÃ@ Õg6îÃI Õg?îÃJ ÕgÃ@îÃM ÕgÃCîÃN ÕgÃDîÃO ÕgÃEîÃP ÕgÃFñî Õh
î Õhî' Õhî* Õh î- Õh#î. Õh$‹ î Õi
î Õiî Õiî Õiî Õiî Õiî. Õi$î/ Õi%î: Õi0î= Õi3î> Õi4î? Õi5îÃ@ Õi6îÃA Õi7îÃB Õi8îÃC Õi9îÃR ÕiÃHîÃS ÕiÃIîÃ^ ÕiÃTîÃb ÕiÃXîÃc ÕiÃYîÃd ÕiÃZîÃe ÕiÃ[ôî Õj
î Õjî$ Õjî' Õjî< Õj2î= Õj3îÃL ÕjÃBîÃM ÕjÃCîÃN ÕjÃDîî Õk
î Õkî$ Õkî& Õkúî Õlî" Õlî# Õlî. Õl"î/ Õl#îÃD Õl8îÃF Õl:îÃU ÕlÃIîÃV ÕlÃJîÃa ÕlÃUîÃb ÕlÃVîÃc ÕlÃWüî Õmî' Õmî( Õmî4 Õm(î7 Õm+îÃF Õm:îÃG Õm;îÃS ÕmÃGîÃV ÕmÃJîÃY ÕmÃMîÃ\ ÕmÃPîÃk ÕmÃ_îÃl ÕmÃ`îÃw ÕmÃkîÃx ÕmÃlëî Õnõî Õo
î! Õoî" Õoî, Õo"î- Õo#î< Õo2î> Õo4î? Õo5îÃB ÕoÃ@îÃD ÕoÃBîÃF ÕoÃDïî Õpî Õpî Õpî  Õpî" Õpüî Õqî" Õqî# Õqî( Õqî) ÕqîÃF Õq8îÃH Õq:îÃL Õq>îÃM Õq?îÃV ÕqÃHîÃW ÕqÃIîÃZ ÕqÃLîÃ[ ÕqÃMîÃ\ ÕqÃNîÃ] ÕqÃOñî Õrî" Õrî# Õrî& Õrî' Õrî( Õrëî Õsüî Õtî Õtî Õtî$ Õtî% ÕtîÃB Õt6îÃD Õt8îÃH Õt<îÃI Õt=îÃR ÕtÃFîÃS ÕtÃGîÃb ÕtÃVîÃc ÕtÃWîÃd ÕtÃXîÃe ÕtÃY‹ î Õuî$ Õuî% Õuî& Õuî' Õuî. Õu"î/ Õu#î> Õu2î? Õu3îÃJ Õu>îÃK Õu?îÃL ÕuÃ@îÃM ÕuÃAîÃN ÕuÃBîÃU ÕuÃIîÃV ÕuÃJîÃW ÕuÃKîÃX ÕuÃLîÃY ÕuÃMîî Õv
î Õvî Õvî Õvîî Õwî Õw	î Õw
î Õwîî Õxî Õxî Õxî Õxîî Õyî	 Õyî
 Õyî Õyíî Õzî Õzíî Õ{î Õ{íî  "î	 "íî !î !	ìî "î "î Õ{íî	 "î "‘rHñßversion§fileßsourcesÆsourcesContent•names®mappings¿ë¿ë¿ê‹qëî    ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî  	 ëî  
 ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî    ëî  ! ëî  " ëî  # ëî  $ ëî  % ëî  & ëî  ' ëî  ( ëî  ) ëî  * ëî  + ëî  , ëî  - ëî  . ëî  / ëî  0 ëî  1 ëî  2 ëî  3 ëî  4 ëî  5 ëî  6 ëî  7 ëî  8 ëî  9 ëî  : ëî  ; ëî  < ëî  = ëî  > ëî  ? ëî  Ã@ ëî  ÃA ëî  ÃB ëî  ÃC ëî  ÃD ëî  ÃE ëî  ÃF ëî  ÃG ëî  ÃH ëî  ÃI ëî  ÃJ ëî  ÃK ëî  ÃL ëî  ÃM ëî  ÃN ëî  ÃO ëî  ÃP ëî  ÃQ ëî  ÃR ëî  ÃS ëî  ÃT ëî  ÃU ëî  ÃV ëî  ÃW ëî  ÃX ëî  ÃY ëî  ÃZ ëî  Ã[ ëî  Ã\ ëî  Ã] ëî  Ã^ ëî  Ã_ ëî  Ã` ëî  Ãa ëî  Ãb ëî  Ãc ëî  Ãd ëî  Ãe ëî  Ãf ëî  Ãg ëî  Ãh ëî  Ãi ëî  Ãj ëî  Ãk ëî  Ãl ëî  Ãm ëî  Ãn ëî  Ão ëî  Ãp ëî  Ãq ëî  Ãr ëî  Ãs ëî  Ãt ëî  Ãu ëî  Ãv ëî  Ãw ëî  Ãx ëî  Ãy ëî  Ãz ëî  Ã{ ëî  Ã| ëî  Ã} ëî  Ã~ ëî  Ã ëî  ÃÄ ëî  ÃÅ ëî  ÃÇ ëî  ÃÉ ëî  ÃÑ ëî  ÃÖ ëî  ÃÜ ëî  Ãá ëî  Ãà ëî  Ãâ ëî  Ãä ëî  Ãã ëî  Ãå ëî  Ãç ëî  Ãé ëî  Ãè ëî  Ãê ëî  Ãë ëî  Ãí ëî  Ãì ëî  Ãî ëî  Ãï ëî  Ãñ ëî  Ãó ëî  Ãò ëî  Ãô ëî  Ãö ëî  Ãõ ëî  Ãú ëî  Ãù ëî  Ãû ëî  Ãü ëî  Ã† ëî  Ã° ëî  Ã¢ ëî  Ã£ ëî  Ã§ ëî  Ã• ëî  Ã¶ ëî  Ãß ëî  Ã® ëî  Ã© ëî  Ã™ ëî  Ã´ ëî  Ã¨ ëî  Ã≠ ëî  ÃÆ ëî  ÃØ ëî  Ã∞ ëî  Ã± ëî  Ã≤ ëî  Ã≥ ëî  Ã¥ ëî  Ãµ ëî  Ã∂ ëî  Ã∑ ëî  Ã∏ ëî  Ãπ ëî  Ã∫ ëî  Ãª ëî  Ãº ëî  ÃΩ ëî  Ãæ ëî  Ãø ëî  Ã¿ ëî  Ã¡ ëî  Ã¬ ëî  Ã√ ëî  Ãƒ ëî  Ã≈ ëî  Ã∆ ëî  Ã« ëî  Ã» ëî  Ã… ëî  Ã  ëî  ÃÀ ëî  ÃÃ ëî  ÃÕ ëî  ÃŒ ëî  Ãœ ëî  Ã– ëî  Ã— ëî  Ã“ ëî  Ã” ëî  Ã‘ ëî  Ã’ ëî  Ã÷ ëî  Ã◊ ëî  Ãÿ ëî  ÃŸ ëî  Ã⁄ ëî  Ã€ ëî  Ã‹ ëî  Ã› ëî  Ãﬁ ëî  Ãﬂ ëî  Ã‡ ëî  Ã· ëî  Ã‚ ëî  Ã„ ëî  Ã‰ ëî  ÃÂ ëî  ÃÊ ëî  ÃÁ ëî  ÃË ëî  ÃÈ ëî  ÃÍ ëî  ÃÎ ëî  ÃÏ ëî  ÃÌ ëî  ÃÓ ëî  ÃÔ ëî  Ã ëî  ÃÒ ëî  ÃÚ ëî  ÃÛ ëî  ÃÙ ëî  Ãı ëî  Ãˆ ëî  Ã˜ ëî  Ã¯ ëî  Ã˘ ëî  Ã˙ ëî  Ã˚ ëî  Ã¸ ëî  Ã˝ ëî  Ã˛ ëî  Ãˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ‘rIíßmissing¶plugin√¶genAbc¬ê‘  ‘rJî≤dynamicImportCacheπexportAllDeclarationCacheªexportNamedDeclarationCache´importCacheêêë‘rKñ§type•start£end´declaration™specifiers¶source∂ExportNamedDeclarationÕGÿÕGÌ¿ë‘rLï§type•start£end•local®exportedØExportSpecifierÕG·ÕGÍ‘rMî§type•start£end§name™IdentifierÕG·ÕGÍ©HomeStoreM™IdentifierÕG·ÕGÍ©HomeStore¿ù‘rNï§type•start£end™specifiers¶source±ImportDeclarationÕ´Õ˙ë‘rOï§type•start£end®imported•localØImportSpecifierÕ¥ÕÃM™IdentifierÕ¥Õ√ØCommonConstantsM™IdentifierÕ«ÕÃ•Const‘rPï§type•start£end•value£rawßLiteralÕ‘Õ˘Ÿ#../common/constants/CommonConstantsŸ%'../common/constants/CommonConstants'N±ImportDeclarationÕ¸ÕQíOØImportSpecifierÕÕM™IdentifierÕÕµisReachNewAchievementM™IdentifierÕÕµisReachNewAchievementOØImportSpecifierÕÕ1M™IdentifierÕÕ1µACHIEVEMENT_LEVEL_KEYM™IdentifierÕÕ1µACHIEVEMENT_LEVEL_KEYPßLiteralÕ9ÕPµ../model/AchieveModel∑'../model/AchieveModel'N±ImportDeclarationÕSÕüíOØImportSpecifierÕ\ÕgM™IdentifierÕ\Õg´TaskMapByIdM™IdentifierÕ\Õg´TaskMapByIdOØImportSpecifierÕiÕM™IdentifierÕiÕ∂ACHIEVEMENT_LEVEL_LISTM™IdentifierÕiÕ∂ACHIEVEMENT_LEVEL_LISTPßLiteralÕáÕûµ../model/TaskInitList∑'../model/TaskInitList'N±ImportDeclarationÕ°Õ√ë‘rQî§type•start£end•local∂ImportDefaultSpecifierÕ®Õ∞M™IdentifierÕ®Õ∞®TaskInfoPßLiteralÕ∂Õ¬™./TaskInfo¨'./TaskInfo'N±ImportDeclarationÕ≈ÕÂëQ∂ImportDefaultSpecifierÕÃÕ”M™IdentifierÕÃÕ”ßDayInfoPßLiteralÕŸÕ‰©./DayInfo´'./DayInfo'N±ImportDeclarationÕÁÕ)íOØImportSpecifierÕÕ˘M™IdentifierÕÕ˘©dateToStrM™IdentifierÕÕ˘©dateToStrOØImportSpecifierÕ˚Õ	M™IdentifierÕ˚Õ	ÆweekDateFormatM™IdentifierÕ˚Õ	ÆweekDateFormatPßLiteralÕÕ(µ../common/utils/Utils∑'../common/utils/Utils'N±ImportDeclarationÕ+ÕöîOØImportSpecifierÕ4ÕAM™IdentifierÕ4ÕA≠WeekDateModelM™IdentifierÕ4ÕA≠WeekDateModelOØImportSpecifierÕCÕVM™IdentifierÕCÕV≥initializeOnStartUpM™IdentifierÕCÕV≥initializeOnStartUpOØImportSpecifierÕXÕgM™IdentifierÕXÕgØgetPreviousWeekM™IdentifierÕXÕgØgetPreviousWeekOØImportSpecifierÕiÕuM™IdentifierÕiÕu¨WEEK_DAY_NUMM™IdentifierÕiÕu¨WEEK_DAY_NUMPßLiteralÕ}Õô∫../model/WeekCalendarModelº'../model/WeekCalendarModel'N±ImportDeclarationÕúÕÕëQ∂ImportDefaultSpecifierÕ£ÕÆM™IdentifierÕ£ÕÆ´DatabaseApiPßLiteralÕ¥ÕÃ∂../model/DatabaseModel∏'../model/DatabaseModel'N±ImportDeclarationÕœÕëQ∂ImportDefaultSpecifierÕ÷ÕÊM™IdentifierÕ÷ÕÊ∞TaskInfoTableApiPßLiteralÕÏÕŸ%../common/database/tables/TaskInfoApiŸ''../common/database/tables/TaskInfoApi'N±ImportDeclarationÕÕTëQ∂ImportDefaultSpecifierÕÕ'M™IdentifierÕÕ'™DayInfoApiPßLiteralÕ-ÕSŸ$../common/database/tables/DayInfoApiŸ&'../common/database/tables/DayInfoApi'N±ImportDeclarationÕVÕöëQ∂ImportDefaultSpecifierÕ]ÕjM™IdentifierÕ]Õj≠GlobalInfoApiPßLiteralÕpÕôŸ'../common/database/tables/GlobalInfoApiŸ)'../common/database/tables/GlobalInfoApi'N±ImportDeclarationÕúÕ»ëQ∂ImportDefaultSpecifierÕ£Õ©M™IdentifierÕ£Õ©¶LoggerPßLiteralÕØÕ«∂../common/utils/Logger∏'../common/utils/Logger'N±ImportDeclarationÕ ÕÛëQ∂ImportDefaultSpecifierÕ—ÕÿM™IdentifierÕ—ÕÿßHashMapPßLiteralÕﬁÕÚ≤@ohos.util.HashMap¥'@ohos.util.HashMap'